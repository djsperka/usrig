' $Id$

#include "Directories.s2s"
#include "RigName.s2s"
#include "LogUtilities.s2s"
#include "ElectrodeUtilities.s2s"


GetDataParameters();

'if GetRigName$() = "AlertRig" then
'    GetDataParameters();
'else
'    GetAcuteDataParameters();
'endif




' This file provides functionality to fetch, save and modify data parameters for Alert Rig scripts. 
' The parameters controlled here are stored in the registry (under the Spike2 key HKCU/Software/CED/Spike2/)
' using the name of the rig (ENCLOSING SCRIPTS MUST HAVE A VAR NAMED thisRigName$ WITH A VALID VALUE!!!), 
' e.g. AlertRig. The entire key is (using this example):
' HKCU/Software/CED/Spike2/AlertRig/Data
'
' Requires "RigName.s2s" be #included, or that the var "thisRigName$" be initialized. 
'
' Usage should be as follows:
'
' 1. Retrieve parameters from registry:
'
' GetDataParameters();  
'
' 2. Open dialog to modify values:
'
' if DataParametersDialog() = 1 then
'    ...continue....
' else
'    ...user hit Cancel...
' endif
'
' There is no need to directly call SaveDataParameters(), as it is called automatically
' when the user hits OK in the DataParametersDialog. 


var dataPathRoot$ := "C:\\Experiments";		' base path for data storage
var dataDataSet$ := "None";         		' folder under data path where data files placed
var dataCellName$ := "a";           		' part of base name for all data files
' removed see below var dataAcuteDistanceToScreenMM$ := "9999";   ' screen distance, acute rig only UPDATE: w
var dataDistanceToScreenMM$ := "9999";          ' moved from UsreyDAQ to here 
var dataDataSetTextItem%;	' 

func GetDataPathRoot$()
    return dataPathRoot$;
end

func GetDataSetName$()
    return dataDataSet$;
end

func GetDataCellName$()
    return dataCellName$;
end

func GetCurrentDataPath$(iSlashes%)
    var s$;
    s$ := dataPathRoot$ + "\\" + dataDataSet$;
    if iSlashes% <> 0 then
        s$ += "\\";
    endif
    return s$;
end

func GetAcuteDistanceToScreenMM$()
    return GetDistanceToScreenMM$();
end

func GetDistanceToScreenMM$()
    return dataDistanceToScreenMM$;
end

proc SetDistanceToScreenMM(idist%)
    dataDistanceToScreenMM$ := str$(idist%);
    return;
end

proc GetDataParameters()
	var key$;
	key$ := GetRigName$() + "\\Data";
    dataPathRoot$ := GetStringRegistryValue$(key$, "PathRoot", dataPathRoot$);
	dataDataSet$ := GetStringRegistryValue$(key$, "DataSet", dataDataSet$);
	dataCellName$ := GetStringRegistryValue$(key$, "CellName", dataCellName$);
    dataDistanceToScreenMM$ := GetStringRegistryValue$(key$, "DistanceToScreenMM", dataDistanceToScreenMM$);
end;

proc SaveDataParameters()
	var key$;
	key$ := GetRigName$() + "\\Data";
    SetStringRegistryValue(key$, "PathRoot", dataPathRoot$);
	SetStringRegistryValue(key$, "DataSet", dataDataSet$);
	SetStringRegistryValue(key$, "CellName", dataCellName$);
    SetStringRegistryValue(key$, "DistanceToScreenMM", dataDistanceToScreenMM$);
	return;
end;

func DataParametersDialog%()
	var i%;
    var idist%;
	GetDataParameters();
	DlgCreate("Data Storage Parameters", 25, 10, 50);
	DlgText("Data root path: " + dataPathRoot$, 0, 1);
	dataDataSetTextItem% := DlgText("Data set name: " + dataDataSet$, 0, 2);
	DlgString(1, "Cell name:", 10, "", 0, 3);
    DlgInteger(2, "Dist to Screen (MM):", 1, 10000, 0, 4);
    DlgButton(3, "New Data Set", NewDataSet%);
    idist% := val(GetDistanceToScreenMM$());
	i% := DlgShow(dataCellName$, idist%);
	if (i% = 1) then
        SetDistanceToScreenMM(idist%);
		if Len(dataDataSet$) = 0 then
			Message("Must specify a data set (try the button!)");
		else
			if Len(dataCellName$) = 0 then
				Message("Must specify a cell name");
			else
                ' This will create folders as needed
				FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
				SaveDataParameters();
			endif;
		endif;
	endif;
	return i%;
end;

proc GetAcuteDataParameters()
    GetDataParameters();
end;

proc SaveAcuteDataParameters()
    SaveDataParameters();
end;

func AcuteDataParametersDialog%()
	var i%;
    var itemp%;
	GetAcuteDataParameters();
    itemp% := val(dataDistanceToScreenMM$);
	DlgCreate("Data Storage Parameters", 25, 10, 50);
	DlgText("Data root path: " + dataPathRoot$, 0, 1);
	dataDataSetTextItem% := DlgText("Data set name: " + dataDataSet$, 0, 2);
	DlgString(1, "Cell name:", 10, "", 0, 3);
    DlgButton(102, "New Data Set", NewDataSet%);
    DlgButton(103, "Electrodes", ElectrodesDialog%);
    DlgInteger(2, "Dist to Screen (MM):", 1, 10000, 0, 4);
	i% := DlgShow(dataCellName$, itemp%);
	if (i% = 1) then
		if Len(dataDataSet$) = 0 then
			Message("Must specify a data set (try the button!)");
		else
			if Len(dataCellName$) = 0 then
				Message("Must specify a cell name");
			else
				FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
                dataDistanceToScreenMM$ := str$(itemp%);
				SaveAcuteDataParameters();
			endif;
		endif;
	endif;
	return i%;
end;


func NewDataSet%()
	var d$;
	var i%;
	var dirs$[100];	' if there are ever more than 100 datasets in a single day there will be trouble
	d$ := Date$(2, 2, 3, 3, "-");
	PrintLog("NewDataSet: date string = " + d$ + "\n");

	' Change current dir to data path root, then get list of subdirs with this date string
	PrintLog("NewDataSet: dataPathRoot$=" + dataPathRoot$ + "\n");
	FilePathSet(dataPathRoot$, 0, 1);
	i% := FileList(dirs$, -2, d$ + "-??");
        PrintLog("NewDataSet: found " + str$(i%) + " dirs\n");

	' form new dataset name. The first will have "-01" appended, the second "-02", etc. 
	dataDataSet$ := Print$("%s-%02d", d$, i%+1);
	PrintLog("NewDataSet: dataset= " + dataDataSet$ + "\n");
	DlgValue$(dataDataSetTextItem%, "Data set name: " + dataDataSet$);
	return 1;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Data parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection START
'
'	These functions and vars handle the current configuration and the list of possible
'	configurations. SelectConfigurationDialog% prompts user to select current configuration.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



var CurrentConfiguration$;
var ConfigurationList$;

proc GetConfigurationParameters()
	Profile(GetRigName$(), "ConfigurationList", "", ConfigurationList$);
	Profile(GetRigName$(), "CurrentConfiguration", "default", CurrentConfiguration$);
end;

proc SaveConfigurationParameters()
	Profile(GetRigName$(), "ConfigurationList", ConfigurationList$);
	Profile(GetRigName$(), "CurrentConfiguration", CurrentConfiguration$);
end;
	
func SelectConfigurationDialog%()
	var s$;
	var i%;
	var iReturn% := 0;
	GetConfigurationParameters();
	s$ := CurrentConfiguration$;

	DlgCreate("Select configuration", 25, 10);
	DlgString(1, "Configuration:", 20, "", 0, 0, ConfigurationList$);
	i% := DlgShow(s$);


	if i% = 1 then

		i% := CheckDup(s$, ConfigurationList$);
		if i% = 0 then
			' New config, add to Config list, set it to current
			if Len(ConfigurationList$)>0 then
				ConfigurationList$ := ConfigurationList$ + "|" + s$;
				CurrentConfiguration$ := s$;
			else
				ConfigurationList$ := s$;
				CurrentConfiguration$ := s$;
			endif;
		else
			CurrentConfiguration$ := s$;
		endif
		SaveConfigurationParameters();
		iReturn% := 1;

	else
		iReturn% := 0;
	endif

	return iReturn%;
end;

func CheckDup(value$, list$)
	var items$[20];
	var nitems%:=0;
	var i%;

	' Extract list into an array
	ReadSetup("", "", "", "", "|");
	nitems% := ReadStr(list$, items$);

	var s1tmp$, s2tmp$;
	s1tmp$ := UCase$(value$);
	for i% := 0 to nitems%-1 do
		s2tmp$ := UCase$(items$[i%]);
		if s1tmp$ = s2tmp$ then
			return 1;
		endif
	next

	return 0;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection END
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var s$;
	Profile(GetRigName$(), "CurrentConfiguration", "default", s$);
	return s$;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals START
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var TotalTrials%;
var TotalRewards%;
var TotalDate$;


proc GetDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", "", TotalDate$);
	Profile(key$, "TotalTrials", 0, TotalTrials%);
	Profile(key$, "TotalRewards", 0, TotalRewards%);

	' Get date string if needed
	if Len(TotalDate$) = 0 then
		TotalDate$ := GetDayString$();
		SaveDailyTotals();
	endif
end;

proc SaveDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", TotalDate$);
	Profile(key$, "TotalTrials", TotalTrials%);
	Profile(key$, "TotalRewards", TotalRewards%);
end;

func DailyTotalsDialog%()
	GetDailyTotals();
	DlgCreate("Daily Totals");
	DlgText("Date: " + TotalDate$, 0, 1);
	DlgText("Trials: " + str$(TotalTrials%), 0, 2);
	DlgText("Rewards: " + str$(TotalRewards%), 0, 3);
	DlgButton(2, "Reset", ResetDailyTotals%);
	DlgShow();
	return 1;
end;


func GetDayString$()
	return Date$(2, 1, 3, 2, "-");
end;


func ResetDailyTotals%()
	GetDailyTotals();
	TotalRewards%:=0;
	TotalTrials%:=0;
	TotalDate$:= GetDayString$();
	SaveDailyTotals();
        return 0;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetRegistryKey$
'
' returns the registry key used to store and fetch parameters. The first key name is the rig name
' (e.g. "AlertRig"). If iWithCurrentConfiguration% is nonzero then the current configuration is 
' appended (e.g. "AlertRig\\default").
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetRegistryKey$(iWithCurrentConfiguration%)
    var key$;
    if iWithCurrentConfiguration% = 0 then
        key$ := GetRigName$();
    else
        key$ := GetRigName$() + "\\" + GetCurrentConfiguration$();
    endif
    return key$;
end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Set(Float, Int, String)RegistryValue
'
' Sets values in registry for given key/name pairs. These functions are just
' simple wrappers around calls to Spike2's Profile function, and as such don't 
' make things must simpler. I made them as companions to the corresponding 
' Get(Float, Int, String)RegistryValue functions. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


proc SetFloatRegistryValue(key$, name$, value)
    Profile(key$, name$, str$(value));
    return;
end;

proc SetIntRegistryValue(key$, name$, value%)
    Profile(key$, name$, value%);
    return;
end

proc SetStringRegistryValue(key$, name$, value$)
    Profile(key$, name$, value$);
    return;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Get(Float, Int, String)RegistryValue
'
' Gets registry values for the key/name pairs. If the key/name pair do not 
' exist, an error message is printed to the log window and a dummy value is 
' returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetFloatRegistryValue(key$, name$, defaultValue)
    var stmp$;
    var f;
    var dummy$;
    dummy$ := str$(defaultValue);
    Profile(key$, name$, dummy$, stmp$);
    f := val(stmp$);
    return f;
end

func GetIntRegistryValue%(key$, name$, defaultValue%)
    var i%;
    Profile(key$, name$, defaultValue%, i%);
    return i%;
end

func GetStringRegistryValue$(key$, name$, defaultValue$)
    var stmp$;
    Profile(key$, name$, defaultValue$, stmp$);
    return stmp$;
end
