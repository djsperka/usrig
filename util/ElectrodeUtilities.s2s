' $Id$

var UsePlexon18WM24WF%;  'This configuration was the original, and was originally named "UsePlexon%" but needed to be renamed to avoid confusion - note that this configuration is currently internally deprecated, you can't set it to 1!
var UsePlexon15WF15WF2k%;
var UsePlexon7WM15CN%;
var UsePlexon24WF%;
var JoePlexon1%;
var UsePlexon32LFP29SpikingWF%;
var Dual1401IgnoreHandshake%;
var UseCustomLabels%;
var CustomLabels$[32];
var ExcludedChans%[2];  'This allows us (if we use CreateElectrodeSamplingConfiguration32) to exclude the channels reserved for other info
ExcludedChans%[0] := 30;  'Lowest default excluded channel; the standard TextMark channel is #30
ExcludedChans%[1] := 31;  'Highest default excluded channel; the standard Keyboard channel is #31, exclude additional channels if necessary in individual functions
var WavemarkSamplingRate%;  'this had been hardcoded
var WaveformSamplingRate%;
var WavemarkSamplingRate32%[32];  'for trying to set all 32 sampling rates
var WaveformSamplingRate32%[32];
var WavemarkSamplingRateByPort32%[32];
var WaveformSamplingRateByPort32%[32];
var UseChanByChanSampRates%;


#include "DlgUtilities.s2s"
#include "../scripts/UsreyDAQ.s2s"
#include "UsreyUtil.s2s"
#include "PlexonUtilities.s2s"

var WavemarkPorts%[32];
var NumWavemarkPorts%;
var ContinuousPorts%[32];
var NumContinuousPorts%;


GetElectrodeParameters();

func GetWavemarkPorts%(ports%[])
    docase
    case Len(ports%[]) < NumWavemarkPorts% then 
        return -1;    ' array not large enough
    case NumWavemarkPorts% = 0 then
        return 0;
    else
        ArrConst(ports%[0:NumWavemarkPorts%], WavemarkPorts%[0:NumWavemarkPorts%]);
        return NumWavemarkPorts%;
    endcase
end

func GetContinuousPorts%(ports%[])
    docase
    case Len(ports%[]) < NumContinuousPorts% then 
        return -1;    ' array not large enough
    case NumContinuousPorts% = 0 then
        return 0;
    else
        ArrConst(ports%[0:NumContinuousPorts%], ContinuousPorts%[0:NumContinuousPorts%]);
        return NumContinuousPorts%;
    endcase
end

func GetWavemarkPorts$()
    var s$ := "";
    var i%;
    var count% := 0;
    for i% := 0 to NumWavemarkPorts%-1 do
        s$ += str$(WavemarkPorts%[i%]);
        if i% < NumWavemarkPorts%-1 then
            s$ += ",";
        endif
    next
    return s$;
end

func GetContinuousPorts$()
    var s$ := "";
    var i%;
    for i% := 0 to NumContinuousPorts%-1 do
        s$ += str$(ContinuousPorts%[i%]);
        if i% < NumContinuousPorts%-1 then
            s$ += ",";
        endif
    next
    return s$;
end

func ElectrodesDialog%()
    var wm%[32];
    var cn%[32];
    var i%;
    GetElectrodeParameters();

    ArrConst(wm%[], 0);
    ArrConst(cn%[], 0);
    for i% := 0 to NumContinuousPorts%-1 do
        cn%[ContinuousPorts%[i%]] := 1;
    next
    for i% := 0 to NumWavemarkPorts%-1 do
        wm%[WavemarkPorts%[i%]] := 1;
    next
    if WMCNPortDialog32%("Electrode Configuration", wm%[], cn%[], CustomLabels$[], UseCustomLabels%) = 1 then
        NumWavemarkPorts% := 0;
        NumContinuousPorts% := 0;
        for i% := 0 to Len(wm%[])-1 do
            if wm%[i%] = 1 then
                WavemarkPorts%[NumWavemarkPorts%] := i%;
                NumWavemarkPorts% += 1;
            endif
            if cn%[i%] = 1 then
                ContinuousPorts%[NumContinuousPorts%] := i%;
                NumContinuousPorts% += 1;
            endif
        next
        
        'Now, erase any analog channel default values displayed in CustomLabels$ before writing CustomLabels$ to the registry
        if EyeXPort% >= 0 then
            CustomLabels$[EyeXPort%] := "";
        endif;
        if EyeYPort% >= 0 then
            CustomLabels$[EyeYPort%] := "";
        endif;
        if JoystickPort% >= 0 then
            CustomLabels$[JoystickPort%] := "";
        endif;
        if EEGPort% >= 0 then
            CustomLabels$[EEGPort%] := "";
        endif;
        if OptoEffCopyPort% >= 0 then
            CustomLabels$[OptoEffCopyPort%] := "";
        endif;
        if StimEffCopyPort% >= 0 then
            CustomLabels$[StimEffCopyPort%] := "";
        endif;
        if PhotodiodePort% >= 0 then
            CustomLabels$[PhotodiodePort%] := "";
        endif;
        if TemperaturePort% >= 0 then
            CustomLabels$[TemperaturePort%] := "";
        endif;
        if UtilityPort% >= 0 then
            CustomLabels$[UtilityPort%] := "";
        endif;
        
        SaveElectrodeParameters();
    endif

    
    return 1;
end;


func ElectrodesDialogSetSampFreq%()
    var i%;
    var wm%[32];
    GetElectrodeParameters();
    
    ArrConst(wm%[], 0); 
    for i% := 0 to NumWavemarkPorts%-1 do
        wm%[WavemarkPorts%[i%]] := 1;
    next    
    
    if WMCNPortDialog32SetSampFreq%("Electrode Configuration", wm%[], WaveformSamplingRate32%[], CustomLabels$[], UseCustomLabels%) = 1 then
        NumWavemarkPorts% := 0;
        NumContinuousPorts% := 0;
        for i% := 0 to Len(WavemarkSamplingRate32%[])-1 do
            if wm%[i%] = 1 then
                WavemarkPorts%[NumWavemarkPorts%] := i%;
                NumWavemarkPorts% += 1;
            endif
'            if WavemarkSamplingRate32%[i%] > 0 then
'                WavemarkPorts%[NumWavemarkPorts%] := i%;
'                WavemarkSamplingRateByPort32%[NumWavemarkPorts%] := WavemarkSamplingRate32%[i%];
'                NumWavemarkPorts% += 1;
'            endif
            if WaveformSamplingRate32%[i%] > 0 then
                ContinuousPorts%[NumContinuousPorts%] := i%;
                WaveformSamplingRateByPort32%[NumContinuousPorts%] := WaveformSamplingRate32%[i%];
                NumContinuousPorts% += 1;
            endif
        next
        
        'Now, erase any analog channel default values displayed in CustomLabels$ before writing CustomLabels$ to the registry
        if EyeXPort% >= 0 then
            CustomLabels$[EyeXPort%] := "";
        endif;
        if EyeYPort% >= 0 then
            CustomLabels$[EyeYPort%] := "";
        endif;
        if JoystickPort% >= 0 then
            CustomLabels$[JoystickPort%] := "";
        endif;
        if EEGPort% >= 0 then
            CustomLabels$[EEGPort%] := "";
        endif;
        if OptoEffCopyPort% >= 0 then
            CustomLabels$[OptoEffCopyPort%] := "";
        endif;
        if StimEffCopyPort% >= 0 then
            CustomLabels$[StimEffCopyPort%] := "";
        endif;
        if PhotodiodePort% >= 0 then
            CustomLabels$[PhotodiodePort%] := "";
        endif;
        if TemperaturePort% >= 0 then
            CustomLabels$[TemperaturePort%] := "";
        endif;
        if UtilityPort% >= 0 then
            CustomLabels$[UtilityPort%] := "";
        endif;
        
        SaveElectrodeParameters();
    endif

    
    return 1;
end;


proc GetElectrodeParameters()
	var key$;
    var s$;
    var temp%;
    var i%;
    
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    s$ := GetStringRegistryValue$(key$, "WavemarkPorts", "");
    NumWavemarkPorts% := ReadStr(s$, WavemarkPorts%[]);
    s$ := GetStringRegistryValue$(key$, "ContinuousPorts", "");
    NumContinuousPorts% := ReadStr(s$, ContinuousPorts%[]);
    Profile(key$, "UsePlexon", 0, UsePlexon18WM24WF%);
    Profile(key$, "UsePlexon15WF15WF2k", 0, UsePlexon15WF15WF2k%);
    Profile(key$, "UsePlexon7WM15CN", 0, UsePlexon7WM15CN%);
    Profile(key$, "UsePlexon24WF", 0, UsePlexon24WF%);
    Profile(key$, "JoePlexon1", 0, JoePlexon1%);
    Profile(key$, "UsePlexon32LFP29SpikingWF", 0, UsePlexon32LFP29SpikingWF%);
    Profile(key$, "Dual1401IgnoreHandshake", 0, Dual1401IgnoreHandshake%);
    Profile(key$, "UseCustomLabels", 0, UseCustomLabels%);
    Profile(key$, "WavemarkSamplingRate", 28000, WavemarkSamplingRate%);  'actually setting a default value!
    Profile(key$, "WaveformSamplingRate", 20000, WaveformSamplingRate%);  'actually setting a default value!
    Profile(key$, "UseChanByChanSampRates", 0, UseChanByChanSampRates%);
    for i% := 0 to 31 do
        s$ := GetStringRegistryValue$(key$, "CustomLabel" + Str$(i%), "");
        CustomLabels$[i%] := s$;
        temp% := GetIntRegistryValue%(key$, "WavemarkSamplingRate32" +  Str$(i%), 0);
        WavemarkSamplingRate32%[i%] := temp%;
        temp% := GetIntRegistryValue%(key$, "WaveformSamplingRate32" +  Str$(i%), 0);
        WaveformSamplingRate32%[i%] := temp%;
        temp% := GetIntRegistryValue%(key$, "WavemarkSamplingRateByPort32" +  Str$(i%), 0);
        WavemarkSamplingRateByPort32%[i%] := temp%;
        temp% := GetIntRegistryValue%(key$, "WaveformSamplingRateByPort32" +  Str$(i%), 0);
        WaveformSamplingRateByPort32%[i%] := temp%;
    next;
    
end;

proc SaveElectrodeParameters()
    var key$;
    var s$;
    var i%;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    SetStringRegistryValue(key$, "WavemarkPorts", GetWavemarkPorts$());
    SetStringRegistryValue(key$, "ContinuousPorts", GetContinuousPorts$());
    Profile(key$, "UsePlexon", UsePlexon18WM24WF%); 
    Profile(key$, "UsePlexon15WF15WF2k", UsePlexon15WF15WF2k%);
    Profile(key$, "UsePlexon7WM15CN", UsePlexon7WM15CN%);    
    Profile(key$, "UsePlexon24WF", UsePlexon24WF%); 
    Profile(key$, "JoePlexon1", JoePlexon1%);
    Profile(key$, "UsePlexon32LFP29SpikingWF", UsePlexon32LFP29SpikingWF%);
    Profile(key$, "Dual1401IgnoreHandshake", Dual1401IgnoreHandshake%);
    Profile(key$, "UseCustomLabels", UseCustomLabels%);
    Profile(key$, "WavemarkSamplingRate", WavemarkSamplingRate%);
    Profile(key$, "WaveformSamplingRate", WaveformSamplingRate%);
    Profile(key$, "UseChanByChanSampRates", UseChanByChanSampRates%);
    for i% := 0 to 31 do
        SetStringRegistryValue(key$, "CustomLabel" + Str$(i%), CustomLabels$[i%]);
        SetIntRegistryValue(key$, "WavemarkSamplingRate32" +  Str$(i%), WavemarkSamplingRate32%[i%]);
        SetIntRegistryValue(key$, "WaveformSamplingRate32" +  Str$(i%), WaveformSamplingRate32%[i%]);
        SetIntRegistryValue(key$, "WavemarkSamplingRateByPort32" +  Str$(i%), WavemarkSamplingRateByPort32%[i%]);
        SetIntRegistryValue(key$, "WaveformSamplingRateByPort32" +  Str$(i%), WaveformSamplingRateByPort32%[i%]);
    next;
end;


func CreateElectrodeSamplingConfiguration(iStartWM%, iStartCont%)
    var iStatus% := -1;
    var i%;
    var ichan%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
		SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        if useCustomLabels% = 1 and CustomLabels$[WavemarkPorts%[i%]] <> "" then
            SampleTitle$(ichan%, CustomLabels$[WavemarkPorts%[i%]] + "WM"); 
        else
            SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        endif;
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    
    for i% := 0 to NumContinuousPorts%-1 do
        SampleWaveform(ichan%, ContinuousPorts%[i%], 20000);
        if useCustomLabels% = 1 and CustomLabels$[ContinuousPorts%[i%]] <> "" then
            SampleTitle$(ichan%, CustomLabels$[ContinuousPorts%[i%]] + "WF"); 
        else
            SampleTitle$(ichan%, "Cont " + str$(ContinuousPorts%[i%])); 
        endif;
        ichan% += 1;
    next
    
    return iStatus%;
end


'this is exactly the same as CreateElectrodeSamplingConfiguration, but it uses a 2 kHz continuous rather than 20 kHz continuous
'it is just a quick and dirty function that allows us to try out some Plexon sampling
func CreateElectrodeSamplingConfiguration2(iStartWM%, iStartCont%)
    var iStatus% := -1;
    var i%;
    var ichan%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
		SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    
    for i% := 0 to NumContinuousPorts%-1 do
        SampleWaveform(ichan%, ContinuousPorts%[i%], 2000);
        SampleTitle$(ichan% + 1, "Cont " + str$(ContinuousPorts%[i%]));
        ichan% += 1;
    next
    
    return iStatus%;
end


'this is exactly the same as CreateElectrodeSamplingConfiguration, but it allows Henry to change his values without affecting
'anybody else
func CreateElectrodeSamplingConfigurationHenry(iStartWM%, iStartCont%)
    var iStatus% := -1;
    var i%;
    var ichan%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
		SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, sample rate
		SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    
    for i% := 0 to NumContinuousPorts%-1 do
        SampleWaveform(ichan%, ContinuousPorts%[i%], 20000);  'chan, port, sample rate
        SampleTitle$(ichan% + 1, "Cont " + str$(ContinuousPorts%[i%]));
        ichan% += 1;
    next
    
    return iStatus%;
end



'This function is just like all of the other CreateElectrodeSamplingConfiguration functions,
'but this one goes to 11...erm, 32.  Also, it requires an input of excludedChans%[], which 
'is a two-element vector, the first element holding the first reserved channel number and the
'second element holding the last reserved channel number.  Requested ports will be dealt to 
'allowable channel numbers.
func CreateElectrodeSamplingConfiguration32(iStartWM%, iStartCont%, ExcludedChans%[])
    var iStatus% := -1;
    var i%;
    var ichan%;
    var WMIndex%;
    var WFIndex%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
        if ichan% = ExcludedChans%[0] then
            ichan% := ExcludedChans%[1]+1;
        endif;
        'SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, WavemarkSamplingRate%); ' chan, port, event rate, points, pre-trigger, rate
'        if UseChanByChanSampRates% > 0 then
'            SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, WavemarkSamplingRateByPort32%[i%]); ' chan, port, event rate, points, pre-trigger, rate
'            WMIndex% += 1;
'        else
'            SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, WavemarkSamplingRate%); ' chan, port, event rate, points, pre-trigger, rate
'        endif;
        if useCustomLabels% = 1 and CustomLabels$[WavemarkPorts%[i%]] <> "" then
            SampleTitle$(ichan%, CustomLabels$[WavemarkPorts%[i%]] + "WM"); 
        else
            SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        endif;
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    var mycount%;
    mycount% := 0;
    for i% := 0 to NumContinuousPorts%-1 do
        'printlog("Excluded Chans is %d\n",ExcludedChans%[]);
        if ichan% = ExcludedChans%[0] then
            ichan% := ExcludedChans%[1]+1;
        endif;
        'SampleWaveform(ichan%, ContinuousPorts%[i%], 20000);
        printlog("iChan is %d\n",ichan%);
        if UseChanByChanSampRates% > 0 then
            SampleWaveform(ichan%, ContinuousPorts%[i%], WaveformSamplingRateByPort32%[i%]);
            WFIndex% += 1;
        else
            mycount%+=1;
            SampleWaveform(ichan%, ContinuousPorts%[i%], WaveformSamplingRate%);
        endif;
        if useCustomLabels% = 1 and CustomLabels$[ContinuousPorts%[i%]] <> "" then
            SampleTitle$(ichan%, CustomLabels$[ContinuousPorts%[i%]] + "WF"); 
        else
            SampleTitle$(ichan%, "Cont " + str$(ContinuousPorts%[i%])); 
        endif;
        ichan% += 1;
        
    next
    printlog("Requested %d continuous channels\n",mycount%);
    return iStatus%;
end







'This function sets up the sampling on the Micro 1401 mark II for the 18 WaveMark/24 LFP max configuration
'It creates 13 WaveMarks.  Two eye position channels are expected to be set up by the calling script
func CreatePlexonSamplingConfiguration1824Micro()
    var iStatus% := -1;
    var i%;
    
    for i% := 0 to 12 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 28571); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+1)); 
	next
    
    SampleUsPerTime(2.5);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end


'This function sets up the sampling on the Power1401  for the 18 WaveMark/24 LFP max configuration
'It creates 5 WaveMarks and 24 Waveform channels - note that eye channels are on the Micro
func CreatePlexonSamplingConfiguration1824Power()
    var iStatus% := -1;
    var i%;
    
    for i% := 0 to 4 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 28571); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+14)); 
	next
    
    for i% := 0 to 23 do
		SampleWaveform(i%+6,i%+5,2484.5);  'chan, port, sampling rate
		SampleTitle$(i%+6, "LFP " + str$(i%+1)); 
	next
    
    SampleUsPerTime(2.5);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end



'This function sets up the sampling on the Master 1401 for the Joe1 configuration
'It creates 24 WaveMarks.  Two eye position channels are expected to be set up by the calling script
func CreateJoePlexon1SamplingConfigurationMaster()
    var iStatus% := -1;
    var i%;
    
    for i% := 0 to 23 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 20000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+1)); 
	next
    
    SampleUsPerTime(2);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end


'This function sets up the sampling on the Slave Power1401 for the Joe1 Configuration
'It creates 24 Waveform channels - note that eye channels are on the Master
func CreateJoePlexon1SamplingConfigurationSlave()
    var iStatus% := -1;
    var i%;
    
    for i% := 0 to 23 do
		SampleWaveform(i%+1,i%,5000);  'chan, port, sampling rate
		SampleTitle$(i%+1, "LFP " + str$(i%+1)); 
	next
    
    SampleUsPerTime(2);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end




'This function sets up the sampling on the Primary 1401 (32-channel) for the 30WF/30WM configuration
'It creates 14 WaveMarks and 14 Waveforms.  Two eye position channels and a joystick channel are expected to be on ports 13-15
func CreateElectrodeSamplingConfiguration30WF30WMPrimary()
    var iStatus% := -1;
    var i%;
    
    'Note: This function is unused.
    'Note2: This function does not properly skip ExcludedChans
    
    'do not use ports 13-15
    'do not use channels 23-32
    
    'Make sure the ports we assume are correct
    'Note that in principle we could use a utility port or something here though we need to be sure it will be collected at 1 kHz
    'and we can only have three total ports used, between 13-15.  Add other ports here if they will be used.
    docase 
    case WhichEyeXPort%() = -1 then
       'This is OK, do nothing
    case WhichEyeXPort%() < 13 or WhichEyeXPort%() > 15 then
        message("The EyeX port must be between 13 and 15!");
        halt;
    endcase;
    docase 
    case WhichEyeYPort%() = -1 then
       'This is OK, do nothing
    case WhichEyeYPort%() < 13 or WhichEyeYPort%() > 15 then
        message("The EyeY port must be between 13 and 15!");
        halt;
    endcase;
    docase 
    case WhichjoystickPort%() = -1 then
       'This is OK, do nothing
    case WhichJoystickPort%() < 13 or WhichJoystickPort%() > 15 then
        message("The EyeX port must be between 13 and 15!");
        halt;
    endcase;
    
    'do not use ports 13-15
    'do not use channels 23-32
    
    'First 13 ports (0-12) are Wavemarks, channels 1-13
    for i% := 0 to 12 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 28011); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+1)); 
	next
    'Port 16 is the final (14th) Wavemark, but the channel sticks at 14
    SampleWaveMark(14, 16, 2000, 34, 15, 28011); ' chan, port, event rate, points, pre-trigger, rate
    SampleTitle$(14, "WMrk " + str$(14));
    
    'Ports 17-24 will be on channels 15-22
    for i% := 15 to 22 do
		SampleWaveform(i%,i%+2,1000);  'chan, port, sampling rate
		SampleTitle$(i%, "LFP " + str$(i%)); 
	next
    
    'Ports 25-30 will be on channels 33-38
    for i% := 33 to 38 do
		SampleWaveform(i%,i%-8,1000);  'chan, port, sampling rate
		SampleTitle$(i%, "LFP " + str$(i%)); 
	next
    
    SampleUsPerTime(1.7);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    return iStatus%;  'this is useless!
end




'This function sets up the sampling on the Secondary 1401 (32-channel) for the 30WF/30WM configuration
'It creates 16 WaveMarks and 16 Waveforms.
func CreateElectrodeSamplingConfiguration30WF30WMSecondary()
    var iStatus% := -1;
    var i%;
    
    'First 16 ports (0-15) are Wavemarks, channels 1-16
    for i% := 0 to 15 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 28011); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+1)); 
	next
    
    'Ports 16-31 are Waveforms, will be on channels 17-32
    for i% := 16 to 31 do
		SampleWaveform(i%+1,i%,1000);  'chan, port, sampling rate
		SampleTitle$(i%+1, "LFP " + str$(i%+1)); 
	next
    
    SampleUsPerTime(1.7);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    return iStatus%;  'this is useless!
end






'This function sets up the sampling on the Primary 1401 (32-channel) for the 32LFP/29SPiking configuration
'It creates 14 Spiking Waveforms and 15 LFP channels.  Two eye position channels and a joystick channel are expected to be on ports 13-15
func CreateElectrodeSamplingConfiguration32LFP29SpikingPrimary(ExcludedChans%[])
    var iStatus% := -1;
    var i%;
    var chanIndex%;
    var UseChans%[32];  'actually could be 29 here, due to 3 Eye/Joy channels, but 32 is fine
    
    'The easiest way to sort out the channels is going to be to make a UseChans%[] list
    i% := 1; 'This will be possible channels, channels start at 1
    chanIndex% := 0
    while chanIndex% <= 31 do  
        if i% < ExcludedChans%[0] or i% > ExcludedChans%[1] then  'if possible channel is not excluded
            UseChans%[chanIndex%] := i%;
            chanIndex% += 1;  'increment chanIndex% if we fill the current one
        endif
        i% += 1;  'increment i% on every loop
    wend
    chanIndex% := 0;  'Reset chanIndex% for use below

    'printlog("The usable channel list on primary is %d\n",UseChans%[]);

    'do not use ports 13-15
    'do not use channels 23-32
    
    'Make sure the ports we assume are correct
    'Note that in principle we could use a utility port or something here though we need to be sure it will be collected at 1 kHz
    'and we can only have three total ports used, between 13-15.  Add other ports here if they will be used.
    docase 
    case WhichEyeXPort%() = -1 then
       'This is OK, do nothing
    case WhichEyeXPort%() < 13 or WhichEyeXPort%() > 15 then
        message("The EyeX port must be between 13 and 15!");
        halt;
    endcase;
    docase 
    case WhichEyeYPort%() = -1 then
       'This is OK, do nothing
    case WhichEyeYPort%() < 13 or WhichEyeYPort%() > 15 then
        message("The EyeY port must be between 13 and 15!");
        halt;
    endcase;
    docase 
    case WhichjoystickPort%() = -1 then
       'This is OK, do nothing
    case WhichJoystickPort%() < 13 or WhichJoystickPort%() > 15 then
        message("The EyeX port must be between 13 and 15!");
        halt;
    endcase;
    
    'do not use ports 13-15
    'respect UseChans%[]
    
    'First 13 ports (0-12) are Spiking Waveforms, first 13 channels of UseChans%[]
    for i% := 0 to 12 do
		SampleWaveform(UseChans%[i%], i%, 28011); ' chan, port, sampling rate
		SampleTitle$(UseChans%[i%], "SpkWF " + str$(i%+1)); 
	next
    'Port 16 is the final (14th) Spiking Waveform, 14th channel of UseChans%[]
    SampleWaveform(UseChans%[13], 16, 28011); ' chan, port, sampling rate
    SampleTitle$(UseChans%[13], "SpkWF " + str$(14));
    
    '15 LFP Waveforms are on ports 17-31, and 15th-29th channels of UseChans%[];
    for i% := 14 to 28 do
		SampleWaveform(UseChans%[i%],i%+3,1000);  'chan, port, sampling rate
		SampleTitle$(UseChans%[i%], "LFP " + str$(i%-13)); 
	next
    
    SampleUsPerTime(1.7);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    return iStatus%;  'this is useless!
end




'This function sets up the sampling on the Secondary 1401 (32-channel) for the 32LFP/29Spiking configuration
'It creates 15 Spiking Waveforms and 17 LFP channels.
func CreateElectrodeSamplingConfiguration32LFP29SpikingSecondary()
    var iStatus% := -1;
    var i%;
    
    'First 15 ports (0-14) are Spiking Waveforms, channels 1-15
    for i% := 0 to 14 do
		SampleWaveform(i%+1, i%, 28011); ' chan, port, sampling rate
		SampleTitle$(i%+1, "SpkWF " + str$(i%+15));  'Keep channel titles in register with primary 1401, start at 15
	next
    
    'Ports 15-27 are LFP Waveforms, will be on channels 16-28
    for i% := 15 to 27 do
		SampleWaveform(i%+1,i%,1000);  'chan, port, sampling rate
		SampleTitle$(i%+1, "LFP " + str$(i%+1));  'Keep channel titles in register with primary 1401, start at 16
	next

    'Reserve channels 29-33 for Spike2 (should be only 30-32, but why not buffer?)
    'Ports 28-31 are also LFP Waveforms, will be on channels 34-37
    for i% := 28 to 31 do
		SampleWaveform(i%+6,i%,1000);  'chan, port, sampling rate
		SampleTitle$(i%+6, "LFP " + str$(i%+1));  'Keep channel titles in register with primary 1401, start at 29
	next

    SampleUsPerTime(1.7);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    return iStatus%;  'this is useless!
end











'This function sets up the sampling on a Power1401 for the 7 WaveMark/15 LFP configuration
'Two eye position channels are expected to be set up by the calling script on ports 14 and 15
func CreateElectrodeSamplingConfiguration7WM15CN()
    var iStatus% := -1;
    var i%;
    
    for i% := 0 to 6 do
		SampleWaveMark(i%+1, i%, 2000, 34, 15, 28571); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i%+1, "WMrk " + str$(i%+1)); 
	next
    
    for i% := 0 to 6 do  'these are the pre-eyecoil channels, do not use ports 14/15
		SampleWaveform(i%+8,i%+7,2484.5);  'chan, port, sampling rate
		SampleTitle$(i%+8, "LFP " + str$(i%+1)); 
	next
    
    for i% := 7 to 14 do
		SampleWaveform(i%+8,i%+9,2484.5);  'chan, port, sampling rate
		SampleTitle$(i%+8, "LFP " + str$(i%+1)); 
	next
    
    SampleUsPerTime(2.5);  'set same sample period for both units
    SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end


'This function sets up the sampling on a Power1401 for the 7 WaveMark/15 LFP configuration
'Two eye position channels are expected to be set up by the calling script on ports 14 and 15
func CreateElectrodeSamplingConfiguration15WF15WF2k()
    var iStatus% := -1;
    var i%;
    
    SampleChannels(40);  'we need some extra channels
    
    'do not use ports 14/15
    'do not use channels 23-32
    
    'This does 14 of 15 30kHz waveforms
    for i% := 0 to 13 do  'these are the pre-eyecoil channels, do not use ports 14/15
		SampleWaveform(i%+1,i%,30000);  'chan, port, sampling rate
		SampleTitle$(i%+1, "Raw " + str$(i%+1)); 
	next
    
    'This does the 15th 30kHz waveform
    SampleWaveform(15,16,30000);  'chan, port, sampling rate
    SampleTitle$(15, "Raw " + str$(15)); 
    
    'This does 7 of 15 2kHz waveforms
    for i% := 0 to 6 do
		SampleWaveform(i%+16,i%+17,2000);  'chan, port, sampling rate
		SampleTitle$(i%+16, "LFP " + str$(i%+1)); 
	next
    
    'This does final 8 of 15 2kHz waveforms
    for i% := 0 to 7 do
		SampleWaveform(i%+33,i%+24,2000);  'chan, port, sampling rate
		SampleTitle$(i%+33, "LFP " + str$(i%+8)); 
	next
    
    'SampleUsPerTime(2.5);  'set same sample period for both units
    'SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end


'This function sets up the sampling on a Power1401 for the 24 WaveForm configuration for the TUNING script
'Eye X/Y ports assumed to be 22/23
func CreateElectrodeSamplingConfiguration24WF(ExcludedChans%[])
    var iStatus% := -1;
    var i%;
    var ichan%;
    var WMIndex%;
    var WFIndex%;
    
    'SampleChannels(34);  'we need some extra channels - we need more than this, but shouldn't need to ask here
    
    
    '''''This version is a hack to use the expected 24-channel 1401 configuration 
    'do not use ports 22/23 (expected to be eye tracker channels, there is not expected to be a joystick channel)
    'do not use channels in ExcludedChans%[]
    'Note that only 22 channels will be populated! (2 are reserved for the eye tracker)
    'This version will only work if the above assumptions are not violated
    
    ' Starting channel number is 1.
    ichan% := 1;
    
    'for i% := 0 to NumWavemarkPorts%-1 do
    for i% := 0 to 22 do
        if ichan% = ExcludedChans%[0] then
            ichan% := ExcludedChans%[1]+1;
        endif;

        SampleWaveform(ichan%,i%,30000);  'chan, port, sampling rate
        SampleTitle$(ichan%, "Raw " + str$(i%+1)); 
        
    next
    
        
    
    
    
'    EEGPort% := nineInts%[0];
'        EyeXPort% := nineInts%[1];
'        EyeYPort% := nineInts%[2];
'        JoystickPort% := nineInts%[3];
'        OptoEffCopyPort% := nineInts%[4];
'        StimEffCopyPort% := nineInts%[5];
'        PhotodiodePort% := nineInts%[6];
'        TemperaturePort% := nineInts%[7];
'        UtilityPort% := nineInts%[8];
        
        
        
    '''''This version was the original, which assumed the eye tracker channels were on ports 14/15 on a 16+16 channel 1401    
    'do not use ports 14/15
    'do not use channels 23-32 (this assumption is basically obsolete)   
    'This does 14 of 24 30kHz waveforms
'    for i% := 0 to 13 do  'these are the pre-eyectracker channels, do not use ports 14/15
'		SampleWaveform(i%+1,i%,30000);  'chan, port, sampling rate
'		SampleTitle$(i%+1, "Raw " + str$(i%+1)); 
'	next
'    
'    
'    'This does 8 of 24 30kHz waveforms
'    for i% := 0 to 7 do
'		SampleWaveform(i%+15,i%+16,30000);  'chan, port, sampling rate
'		SampleTitle$(i%+15, "Raw " + str$(i%+15)); 
'	next
'    
'    'This does final 2 of 15 30kHz waveforms
'    for i% := 0 to 1 do
'		SampleWaveform(i%+33,i%+24,30000);  'chan, port, sampling rate
'		SampleTitle$(i%+33, "Raw " + str$(i%+23)); 
'	next
    
    'SampleUsPerTime(2.5);  'set same sample period for both units
    'SampleTimePerADC(1);  'set same ADC rate for both units
    
    
    return iStatus%;  'this is useless!
end