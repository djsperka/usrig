
'JoyTrain - a simple script that allows simple joystick training, initially written for Henry
#include "../util/UsreyUtil.s2s"
#include "UsreyDAQ.s2s"
#include "Joystick.s2s"

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' 	JoyTrain script dialog START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var status%;
var trialCount%;  'How many trials have we done?
var experimenterRewardCount%;  'How many rewards did the experimenter give independent of the trial rewards
var progStarted%;
var StimHandle%;

var superFake%;

const RENDERDEFAULTIP$ := "128.120.140.49";

var DataWindow%;
var XYWindow%;
var StimWindowX[36],StimWindowY[36];	' points for displaying stimulus location in xy view
var iAnswerWindowChannelMain%;  'this is a terrible variable name
var iMonitorChannel%;
var mainX;
var mainY;
var mainW;
var mainH;

'JoyTrain dialog variables
var nTrials% := 50;  'How many trials will we have?  (Can stop at any time)
var showStimulus%;  'if 1, show the stimulus
var stimulusDur := 3;  'stimulus duration, in seconds
var minRewardDelay := 0.5;  'delay following reward before new reward is allowed (before ITI, if showing stimulus), seconds
var randRewardDelay;  'and an added randomizing value, zero OK
var minITI := 0.5;  'delay between trials, minimum
var randITI;  'delay between trials, added randomizing value, zero OK (use rand(randITI,0); )
var directionForReward%;  'this will hold 0 if either up/down, 1 for up, 2 for down.

'Idle processing variables
var tLast;
var tNow;
var iState%;
var tTrigger;
var tLastTrigger;
var vTrigger;
var tStateStart;
var JuiceRewardMS;  'need a float version of this
var ITI;


'State variables
const stateVSGWait% := 1;
const stateVSGWaitConfirm% := 2;
const stateWaitJoyCenter% := 3;
const stateWaitJoyOut% := 4;
const stateRequestStimulus% := 5;
const stateWaitForStimOn% := 6;
const stateWaitJoyOutStimulus% := 7;
const stateWaitForBlank% := 8;
const stateTrialComplete% := 9;


'Channel variables
var JoyChannel%;
var FrameTriggerChannel%;
'var FixationPointChannel%;
var StimChannel%;
var StimChangeChannel%;
var ReadyChannel%;


JoyChannel% := 22; 'this is ripped straight from CuedAtten, should be a fine channel.
FrameTriggerChannel% := 25;
'FixationPointChannel% := 26;
StimChannel% := 27;
StimChangeChannel% := 28;
ReadyChannel% := 29;

LogInit(1);
InitJoystick2(JoyChannel%,GetJoystickPort%()); 'now calls InitJoystick2 - we must do this BEFORE calling the main dialog


' Check for valid data file path
if Len(dataDataSet$) = 0 then
	Message("No data set is selected! Edit Data parameters...");
	' Might be nice to open the dialog here....
	halt;
endif;


' run primary dialog
status% := JoyTrainDialog%();  
if status% <> 1 then
	PrintLog("User cancel - exit gracefully\n");
	halt;
endif;



'Create Sample Configuration
CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();

'''End of script, once the toolbar closes, we're done.




'------------------ Subfunctions -------------------


proc GetJoyTrainDialogParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\JoyTrain";
    
    nTrials% := GetIntRegistryValue%(key$, "nTrials", nTrials%);
    showStimulus% := GetIntRegistryValue%(key$, "showStimulus", showStimulus%);
    stimulusDur := GetFloatRegistryValue(key$, "stimulusDur", stimulusDur);
    minRewardDelay := GetFloatRegistryValue(key$, "minRewardDelay", minRewardDelay);
    randRewardDelay := GetFloatRegistryValue(key$, "randRewardDelay", randRewardDelay);
    minITI := GetFloatRegistryValue(key$, "minITI", minITI);
    randITI := GetFloatRegistryValue(key$, "randITI", randITI);
    directionForReward% := GetIntRegistryValue%(key$, "directionForReward", directionForReward%);
    
end;

proc SaveJoyTrainDialogParameters()
	var key$;
	var stmp$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\JoyTrain";
    
    SetIntRegistryValue(key$, "nTrials", nTrials%);
    SetIntRegistryValue(key$, "showStimulus", showStimulus%);
    SetFloatRegistryValue(key$, "stimulusDur", stimulusDur);
    SetFloatRegistryValue(key$, "minRewardDelay", minRewardDelay);
    SetFloatRegistryValue(key$, "randRewardDelay", randRewardDelay);
    SetFloatRegistryValue(key$, "minITI", minITI);
    SetFloatRegistryValue(key$, "randITI", randITI);
    SetIntRegistryValue(key$, "directionForReward", directionForReward%);
    
end;


func JoyTrainDialog%()
    var i%;
    var dirRew$[3];
    dirRew$[0] := "Respond Either Up or Down";
    dirRew$[1] := "Respond Up";
    dirRew$[2] := "Respond Down";

    GetJoyTrainDialogParameters();
    
	DlgCreate("Joystick Training", 25, 10);
	DlgInteger(1, "Number of trials:", 1, 1000);
    DlgReal(2, "Minimum reward delay (s):", .01, 10);
	DlgReal(3, "Random add'l reward delay:", 0, 10);
    DlgList(4, 25, dirRew$[], 3);
    DlgCheck(5, "Show stimulus");
	DlgReal(6, "Stimulus duration (s):", .01, 100);
    DlgReal(7, "Minimum ITI (s):", .01, 10);
    DlgReal(8, "Random add'l ITI (s):", 0, 10); 
    
    DlgButton(8, "Joystick Dialog", CallJoystickConfigDialog%,20,9);
    
    DlgAllow(0, 0, JoyTrainDialogChanged%);
    
    i% := DlgShow(nTrials%,minRewardDelay,randRewardDelay,directionForReward%,showStimulus%,stimulusDur,minITI,randITI);
    
    if i% = 1 then        
        
        SaveJoyTrainDialogParameters();

        return 1;
    else   
        Printlog("Joy Train Dialog was cancelled!\n");
        return 0;
    endif;
    
end


func JoyTrainDialogChanged%(item%)
    var status% := 1;
    
    'Ignore item, it's not really important
    
    'Just check on whether we are using a stimulus
    if DlgValue(5) = 0 then  
        DlgEnable(0,6);  'Disable stimulus duration
        DlgEnable(0,7);  'Disable ITI
        DlgEnable(0,8);  'Disable add'l ITI
    else
        DlgEnable(1,6);  'Enable stimulus duration
        DlgEnable(1,7);  'Enable ITI
        DlgEnable(1,8);  'Enable add'l ITI
    endif;
    
    return status%;
    
end


'This function ripped directly from CuedAtten, haven't given it any thought yet
func CallJoystickConfigDialog%()
    'This function was written simply to prevent "odd" autonaming of files when saving joystick calibration data
    'Unfortunately, there doesn't seem to be a way to *not* save the data as SampleStop automatically saves it, so
    'this is the next best thing.  Should work for either dialog-based or toolbar-based calls of Joystick config
    
    'Set autoname to use a joystick-based name
    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3);
    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1);
    SampleAutoName$(dataCellName$ + "_joystick_000");  'NOTE: maximum of 13 characters!!!    
    
    JoystickConfigDialog%();
    
    'Set autoname back to what it should be once we return
    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3);
    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1);
    SampleAutoName$(dataCellName$ + "_ca_000");  'NOTE: maximum of 13 characters!!!
    
    return 1;
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
    var key$;
    key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Temp\\Filepref";
    SampleClear(); 'Set standard sampling state
    SampleChannels(64);  '32 does not work, we need more!

    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3);
    FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1);
    SampleAutoName$(dataCellName$ + "_jtr_000");  'NOTE: maximum of 13 characters!!!
    SampleAutoFile(1);  'Enable automatic file naming
    
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
	'Channel recording definitions
	SampleEvent(FrameTriggerChannel%,0,2,3600); 'Trigger channel, level
	SampleComment$(FrameTriggerChannel%,"Frame");
	SampleTitle$(FrameTriggerChannel%,"Frame");
    
 	'SampleEvent(FixationPointChannel%,2,2,3600); 'Trigger channel, level
	'SampleComment$(FixationPointChannel%,"Fixation");
	'SampleTitle$(FixationPointChannel%,"Fixation");
	
	SampleEvent(StimChannel%,3,2,3600); 'Trigger channel, level
	SampleComment$(StimChannel%,"Stim");
	SampleTitle$(StimChannel%,"Stim");
	
	SampleEvent(StimChangeChannel%,4,2,3600); 'Trigger channel, level
	SampleComment$(StimChangeChannel%,"Stim Chg.");
	SampleTitle$(StimChangeChannel%,"Stim Chg.");
	
	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");
     
	SampleTextMark(200);  'increase number of allowed characters to 200
    
    SampleSequencer(script$ + "Tuning.pls");

	SampleMode(1); 'Continuous sampling
end;



proc InitializeWindows()
    var index%;
    var pi := 3.141592653589793;  'There is a pre-defined constant "_pi", but only on 8.03 and beyond, explicitly defining pi for back-compatibility
    var screenMMPerDegree;
    var cmScreenXDeg;
    var cmScreenYDeg;
    var cmScreenMMX;
    var cmScreenMMY;
    
    
	'Open the data sampling window
	DataWindow% := FileNew(0,4);  'show spike shape setup dialog
    printlog("datawindow is %d\n",dataWindow%);
	Window(0,48,100,95);
	View(DataWindow%).WindowVisible(1);
    
    
    'Open an XY view to display, well not eye position but stimulus position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(0, 0, 100, 47);
	XYColour(1,16);
	XYSize(1,-1);
    
    'get locations of stimuli so we can plot the stimulus when it is up
    ParseGratingParametersBrief%(GetGratingParameters$("Stimulus"),mainX,mainY,mainW,mainH);    
    
 
    'Create new channels in the XY view to display the answer windows
    'Main stimulus window
    for index% := 0 to 35 do
        StimWindowX[index%] := mainX + mainW * Cos(index%*2*pi/36.0);
		StimWindowY[index%] := mainY + mainH * Sin(index%*2*pi/36.0);
	next;
    iAnswerWindowChannelMain% := XYSetChan(0);
    XYColour(iAnswerWindowChannelMain%,13);
	XYDrawMode(iAnswerWindowChannelMain%,2,1);
	XYJoin(iAnswerWindowChannelMain%,1);
	'Draw the stimulus window...TODO should really only do this when the stimulus is up.
	XYAddData(iAnswerWindowChannelMain%, StimWindowX[], StimWindowY[]);
    
	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(iMonitorChannel%,13);
	XYDrawMode(iMonitorChannel%,3,1);
	XYJoin(iMonitorChannel%,2);
    
    'Calculate size of screen in degrees here
    screenMMPerDegree := Val(GetDistanceToScreenMM$())*pi/180;  
    cmScreenXDeg := (cmScreenMMX/2)/screenMMPerDegree;  'we are defining fvScreenX(Y)Deg as HALF the screen so it is the distance from fixation to the edge
    cmScreenYDeg := (cmScreenMMY/2)/screenMMPerDegree;
    
    'Show monitor location
    XYAddData(iMonitorChannel%,-cmScreenXDeg,-cmScreenYDeg); 
	XYAddData(iMonitorChannel%,cmScreenXDeg,-cmScreenYDeg);
	XYAddData(iMonitorChannel%,cmScreenXDeg,cmScreenYDeg);
	XYAddData(iMonitorChannel%,-cmScreenXDeg,cmScreenYDeg);
    
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitializeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()
    
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	UpdateToolbarText();
    ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Quit", Stop%);
	ToolbarSet(3,"Juice", Reward%);
    ToolbarSet(4,"FakeJoyMove", SuperFakeFunctionToFakeJoystickMovement%);
	Toolbar("Go",0x3ff);
    
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
    var Stim$;
    var Tune$;
    var Extras$;
    var stimSpec$;
    var x, y, w, h, iw, ih, sf, tf, ori, phase, ctf;
    var contrast%; 
    var cv$, pattern$, aperture$;
    var ProgName$;
    var RenderIP$;
    var jsonFilePre$;
    var cmdLine$;
    var tempBinDir$;
    
    
    'start sampling - not going to be recording during this so don't include plexon options
    SampleStart(0); 'Start sampling now
    
    'Change offset of joystick channel
    View(DataWindow%).ChanOffset(JoyChannel%,joystickOffset);  'use value from registry
    
    'Set value of right/left joystick
    GetJoystickParameters();  'now we run the joystick functions from Sperka, should work smoothly
    DisplayJoystickParameters();
    
    
    ' Set Sequencer Variable #3 based on juicer type 
    SetJuicerSequencerVariable%();
    ' Clear any trigger bits on digout lines.
    SafeSampleKey("0");  'this is DIGOUT
    SafeSampleKey("Z");  'this is DIGLOW
    Yield();
    tLast := View(DataWindow%).MaxTime();
    
    'Get stimulus specs no matter what.  If we aren't presenting a stimulus, don't ever ask for the "S"
    stimSpec$ := GetGratingParameters$("Stimulus");
    Stim$ := " -s " + stimSpec$;
    
    'Parse the grating parameters, we really only want contrast
    ParseGratingParameters%(stimSpec$, x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$, ctf);
    'Use the currently-requested contrast at THE contrast
    Tune$ := " -C " + str$(contrast%);
    'Set the rest of the command line stuff
    Extras$ := " -b " + "gray" + " -d " + GetDistanceToScreenMM$();  'just saying "gray" and not bothering with giving user the option on BG color
    
    tempBinDir$ := bin$;
    
    'By default, set ProgName$ to be FIXSTIM
    if DisplayHardwareIndex% = 0 then
        
        if UseRemoteStimulus% = 0 then
            ProgName$ := "\\fixstim.exe ";
        else
            ProgName$ := "\\remote.exe " + GetRemoteStimulusIP$() + " " + GetRemoteStimulusPort$() + " fixstim ";
        endif

    else
        ProgName$ := "\\render_relay.exe ";        
        bin$ := "C:\\Users\\Lab\\Desktop\\render_relay";
        
        jsonFilePre$ := FileName$(1) + FileName$(2) + FileName$(3) + FileName$(4);
        
        'if the user has selected to use remote stimulus then assume that the IP given is for render
        'otherwise fall back to the hardcoded constant at the top of this script (which needs to be
        'changed each time the render machine is rebooted)
        if UseRemoteStimulus% = 1 then            
            RenderIP$ := RemoteStimulusIP$;
        else
            RenderIP$ := RENDERDEFAULTIP$;
        endif
        
        ProgName$ := ProgName$ + "-ip " + RenderIP$ + " -prefix " + jsonFilePre$ + " ";
    endif
    
    
    cmdLine$ := "cmd /c " + bin$ + ProgName$ + Extras$ + Stim$ + Tune$;
    
    ' ==================================================================== '
    ' NOTE: 20170410 PCA
    ' reset bin$ back to its original value so we don't screw anything
    ' else up
    if DisplayHardwareIndex% = 1 then
        bin$ := tempBinDir$; 
    endif      
    ' ==================================================================== '
    
    'Begin the stimulus program. 
	PrintLog(cmdLine$+"\n");
	StimHandle% := ProgRun(cmdLine$,1);
	if StimHandle% <0 then 
        Message("Could not start stimulus."); 
        halt; 
    else
        progStarted% := 1;
    endif
    
    iState% := stateVSGWait%;
    JuiceRewardMS := JuiceRewardMS%;  'Need a float to do a proper calculation in the idle loop
    
    ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(1,0);  'Disable start
	View(DataWindow%);
	Yield(.1);
    return 1;
    
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
    'This function incorporates the necessary basics from the Stop%() and Quit%() functions
    'in normal usreylab code

	' Disable idle process func
	ToolbarSet(0,"");
    
    ' Tell stim app to shut down if it is running
    if progStarted% = 1 then
        SafeSampleKey("Q");
        Yield(.1);
    endif;
    
    'If we are still sampling,sStop sampling
    if SampleStatus()=2 then
        SampleStop();
    endif;
    
    
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend
    
    ' Increment daily totals and save them, seems useless to do this if we didn't even start the program
    if progStarted% = 1 then
        TotalTrials% := trialCount%;
        TotalRewards% := trialCount% + experimenterRewardCount%;
        SaveDailyTotals();
    endif;

    ' Write parameter file - there CAN'T be any reason to do this, right?
	'WriteParameterFile();
    
    FileClose(-1,-1);
	return 0;
    
end;


func IdleProcessing%()
	var iStatus% := 1;	
    var tempanswer%;
    var temptext$;
    
    'The trick here is that sometimes sampling isn't caught up on all channels.  MaxTime() may return a lower
    'value than MaxTime(ChanN%). When we find a trigger and try to place a TextMark, SampleText will do an internal
    'call to MaxTime() - no channel # - to determine whether to place it at the requested time or at MaxTime().
    'In some instances, this has resulted in the TextMark being placed earlier than the event which caused it.
    'We are now explicitly checking for this - if we find it, we have to avoid updating tLast and continue checking
    'in order to not miss the trigger AND to put the TextMark at the right time.
    'Note that we will ONLY do the additional check in instances where a timed TextMark is being placed at the 
    'time of the trigger.
    
    'Note that the joystick functions that exist in the Usrey lab for now only work on a single dimension
    'of the joystick, and up to now the code that I have been implementing follows that.  If we need a second
    'dimension that will be something that has to be dealt with.  In the meantime, it doesn't really make any
    'sense to use an XY display to show a 1-D joystick, so I'll stick with just the channel display for now.
    'DrawStim(1); will draw stimulus on CED XY window
    'DrawStim(0); will blank stimulus on CED XY window
    
    tNow := View(DataWindow%).MaxTime();
   
    docase 
    case iState% = stateVSGWait% then
        ' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
        tTrigger := View(DataWindow%).NextTime(ReadyChannel%, tLast, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 0 then
            PrintLog("state stateVSGWait: Got leading edge of trigger\n");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateVSGWaitConfirm%, tTrigger);
        endif;
        
    case iState% = stateVSGWaitConfirm% then
        ' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
        tTrigger := View(DataWindow%).NextTime(ReadyChannel%, tLastTrigger, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 1 then
            PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateWaitJoyCenter%, tTrigger);
        endif;    
        
    case iState% = stateWaitJoyCenter% then
        'This is the start point for every trial - we have to wait here to make sure that the joystick has been centered.
        if tNow > tStateStart + ITI then 
            if JoyAnswer%(JoyChannel%,tNow) = JSCenter% or superFake% = 0 then
                PrintLog("state stateWaitJoyCenter: Joystick is in center, trial starting at %f\n",tNow);
                
                if showStimulus% = 1 then
                    ChangeStateTo(stateRequestStimulus%, tNow);
                else
                    ChangeStateTo(stateWaitJoyOut%, tNow);
                endif;  
            endif;
        endif;
        
    case iState% = stateWaitJoyOut% then
        docase  'TODO - make sure that below definitions work with regard to Up/Down with actual joystick setup, may need to swap "1" and "3" from results of JoyAnswer%()
        case (JoyAnswer%(JoyChannel%,tNow) = JSUp% or superFake% = 1) and (directionForReward% = 0 or directionForReward% = 1) then
            DefaultReward();  'do not use Reward%() because that increments the experimenter-gave-reward variable
            PrintLog("stateWaitJoyOut: Up response, rewarding.\n");
            ChangeStateTo(stateTrialComplete%, tNow);
        case (JoyAnswer%(JoyChannel%,tNow) = JSDown% or superFake% = 1) and (directionForReward% = 0 or directionForReward% = 2) then
            DefaultReward();  'do not use Reward%() because that increments the experimenter-gave-reward variable
            PrintLog("stateWaitJoyOut: Down response, rewarding.\n");
            ChangeStateTo(stateTrialComplete%, tNow);
        'Note that we are not doing anything if the animal goes in the "wrong" direction
        endcase
        
        
    case iState% = stateRequestStimulus% then
        ' Start trial. Put up stimulus.
        PrintLog("stateRequestStimulus: Requesting stimulus.\n");
        SafeSampleKey("S");  'request stimulus  
        ChangeStateTo(stateWaitForStimOn%, tNow);
        
        
    case iState% = stateWaitForStimOn% then
        tTrigger := View(DataWindow%).NextTime(StimChannel%, tLast, vTrigger);
        if tTrigger > tLast and vTrigger = 0 then
            ' grating is up
            PrintLog("stateWaitForStimOn: Stim is up.\n");
            DrawStim(1);  'Draw the location of the stim on the XY window
            ChangeStateTo(stateWaitJoyOutStimulus%, tTrigger);     
        endif;
        
        
    case iState% = stateWaitJoyOutStimulus% then
        docase  'TODO - make sure that below definitions work with regard to Up/Down with actual joystick setup, may need to swap "1" and "3" from results of JoyAnswer%()
        case (JoyAnswer%(JoyChannel%,tNow) = JSUp% or superFake% = 1) and (directionForReward% = 0 or directionForReward% = 1) then
            SafeSampleKey("X");  'Request stimulus down
            DrawStim(0);  'Remove stimulus indicator from XY window
            DefaultReward();  'do not use Reward%() because that increments the experimenter-gave-reward variable
            trialCount% += 1;  'Keep track of how many times the experimenter gave a reward
            PrintLog("stateWaitJoyOutStimulus: Up response, rewarding.\n");
            ChangeStateTo(stateWaitForBlank%, tNow);
        case (JoyAnswer%(JoyChannel%,tNow) = JSDown% or superFake% = 1) and (directionForReward% = 0 or directionForReward% = 2) then
            SafeSampleKey("X");  'Request stimulus down
            DrawStim(0);  'Remove stimulus indicator from XY window
            DefaultReward();  'do not use Reward%() because that increments the experimenter-gave-reward variable
            trialCount% += 1;  'Keep track of how many times the experimenter gave a reward
            PrintLog("stateWaitJoyOutStimulus: Down response, rewarding.\n");
            ChangeStateTo(stateWaitForBlank%, tNow);
        case tNow > tStateStart+stimulusDur then 'waited too long, get an ITI
            SafeSampleKey("X");  'Request stimulus down
            DrawStim(0);  'Remove stimulus indicator from XY window
            PrintLog("stateWaitJoyOutStimulus: No response, will repeat trial after ITI.\n");
            ChangeStateTo(stateWaitForBlank%, tNow);
        'Note that we are not doing anything if the animal goes in the "wrong" direction
        endcase
        
        
    case iState% = stateWaitForBlank% then
        ' we just wait for fix point off signal in this case. 
        tTrigger := View(DataWindow%).NextTime(StimChannel%, tLast, vTrigger);
        if tTrigger > tLast then
            ' Fixation point is off
            PrintLog("stateWaitForBlank: Stim is off.\n");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateTrialComplete%, tTrigger);
        endif;
        
        
        
    case iState% = stateTrialComplete% then
        
        UpdateToolbarText();
        if trialCount% >= nTrials% then
            PrintLog("stateTrialComplete: All stimuli done, quitting.\n");
            Stop%();
            iStatus% := 0;
        else
            if showStimulus% = 1 then
                ITI := rand(randITI,minITI);
            else
                ITI := rand(randRewardDelay,minRewardDelay);
            endif;
            'The ITI has to be AT LEAST the duration of the reward, so we don't allow the delivery of a reward while the juicer is open
            if ITI < JuiceRewardMS/1000 then
                ITI := JuiceRewardMS/1000;
            endif;
            PrintLog("stateTrialComplete: Trial %d complete.\n",trialCount%);
            changeStateTo(stateWaitJoyCenter%, tNow);
        endif;
        
        
    endcase
    
    
    return iStatus%;
end






'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' UpdateToolbarText - Print tallies of rewards in toolbar
'

proc UpdateToolbarText()
	var s$;

    'only print stats for conditions that have occurred
    if trialCount% > 0 or experimenterRewardCount% > 0 then  
        s$ := Print$(" Trial rewards: %d, Experimenter rewards: %d ",trialCount%, experimenterRewardCount%);
    endif

	ToolbarText(s$);
    
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
    DefaultReward();
    'No sample text, 'R' from keyboard channel is only indicator
    experimenterRewardCount% += 1;  'Keep track of how many times the experimenter gave a reward
    UpdateToolbarText();
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Change this so it reads the joystick - this is a single axis
func JoyAnswer%(chan%,now)
    var ans% := -1;
    var v;
    'v := ChanValue(chan%,now);
    'printlog("voltage is %f\n",v);
    if ChanKind(chan%) > 0 then  'if the channel does not exist, return 0
        ans% := GetJoystickPosition%(v);   
    else
        ans% := 0;
    endif;
        
    
    if ans% = -1 then
        printlog("There has been an error in reading the joystick!  GetJoystickPosition% has returned -1!\n");
    endif
    
    
	return ans%;
    
    'This function will return:
    'JSDown% if joystick is Down
    'JSCenter% if joystick is center
    'JSUp% if joystick is Up
    '0 if joystick is in undefined position
    '-1 on error
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
		' Draw stimulus in xy window
        View(XYWindow%).XYAddData(iAnswerWindowChannelMain%, StimWindowX[], StimWindowY[]);
	else 
		' erase the stim from xy view
        View(XYWindow%).XYDelete(iAnswerWindowChannelMain%);
	endif

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This just allows us to toggle "superFake%", which in turn is just a quick variable that
'allows us to pretend there's a joystick present, just for testing out the idle loop in
'anticipation of actually connecting a joystick.
func SuperFakeFunctionToFakeJoystickMovement%()
    superFake% := 1-superFake%;
	return 1;
end;