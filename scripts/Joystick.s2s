'$Id$
'
' This file contains utilities for using the joystick on the alert2 rig. 

#include "../util/UsreyUtil.s2s"

const JSLeft% := 1;
const JSCenter% := 2;
const JSRight% := 3;
const JSHalfLeft% := 15;  'It's an integer, so we can't do 1.5, and as this is being added later, some scripts may count on checking literal values rather than, say, JSLeft%, so we shouldn't change JSLeft% to 10
const JSHalfRight% := 25;
const JSDown% := 1;  'Please note that Down/Up are NOT intended to be used together with Left/Right as a two-axis joystick at this point
const JSUp% := 3;    'Instead it just makes things make a bit more sense to use different variables for an up/down setup.
const JSHalfDown% := 15;
const JSHalfUp% := 25;

const JSUndefined% := 0;
const JSError% := -1;

var jsLeftHigh := 1;
var jsCenterLow := 2;
var jsCenterHigh := 3;
var jsRightLow := 4;
var jsDownUpperEdge := 1;       'Please note that Down/Up are NOT intended to be used together with Left/Right as a two-axis joystick at this point
var jsCenterLowerEdgeUD := 2;   'Instead it just makes things make a bit more sense to use different variables for an up/down setup.
var jsCenterUpperEdgeUD := 3;
var jsUpLowerEdge := 4;
var jsChannelNumber% := -999;
var jsPortNumber% := 0;
var jsIsInitialized% := 0;
var joystickOffset;  'offset of joystick, will be saved to registry

var jsDlgLeftHighTextItem%;
var jsDlgCenterLowTextItem%;
var jsDlgCenterHighTextItem%;
var jsDlgRightLowTextItem%;
var jsDlgDownUpperEdgeTextItem%;
var jsDlgUpLowerEdgeTextItem%;

GetJoystickParameters();


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitJoystick
'
' Scripts that use the joystick functions must indicate which input channel the 
' joystick is connected to. This function must be called before calling the 
' GetJoystickPosition() func or it will return JSError. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc InitJoystick(channel%)
    jsChannelNumber% := channel%;
    jsIsInitialized% := 1;
    return;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitJoystick2
'
' Scripts that use the joystick functions must indicate which input channel the 
' joystick is connected to. This function must be called before calling the 
' GetJoystickPosition() func or it will return JSError. 
'
' Same as InitJoystick, but also assigns port number
' InitJoystick currently maintained in case anything still calls it.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc InitJoystick2(channel%,port%)
    jsChannelNumber% := channel%;
    jsPortNumber% := port%;
    jsIsInitialized% := 1;
    return;
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickParameters
'
' Called automatically when this file is included in a script. No need to 
' call it from scripts. This function fetches joystick settings for the 
' current configuration from the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc GetJoystickParameters()
    var key$;
    var stmp$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    jsLeftHigh := GetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
    jsCenterLow := GetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
    jsCenterHigh := GetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
    jsRightLow := GetFloatRegistryValue(key$, "RightLow", jsRightLow);
    
    jsDownUpperEdge := GetFloatRegistryValue(key$, "DownUpperEdge", jsDownUpperEdge);
    jsCenterLowerEdgeUD := GetFloatRegistryValue(key$, "CenterLowerEdgeUD", jsCenterLowerEdgeUD);
    jsCenterUpperEdgeUD := GetFloatRegistryValue(key$, "CenterUpperEdgeUD", jsCenterUpperEdgeUD);
    jsUpLowerEdge := GetFloatRegistryValue(key$, "UpLowerEdge", jsUpLowerEdge);
   
    joystickOffset := GetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
    return;
end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SaveJoystickParameters
'
' This function saves joystick settings for the 
' current configuration in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc SaveJoystickParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
    SetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
    SetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
    SetFloatRegistryValue(key$, "RightLow", jsRightLow);
    
    SetFloatRegistryValue(key$, "DownUpperEdge", jsDownUpperEdge);
    SetFloatRegistryValue(key$, "CenterLowerEdgeUD", jsCenterLowerEdgeUD);
    SetFloatRegistryValue(key$, "CenterUpperEdgeUD", jsCenterUpperEdgeUD);
    SetFloatRegistryValue(key$, "UpLowerEdge", jsUpLowerEdge);
    
    SetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
    return;
end


proc DisplayJoystickParameters()
    PrintLog("**************************************\n\n");
    PrintLog("JSLeft  :       v < %f\n", jsLeftHigh);
    PrintLog("JSCenter:  %f < v < %f\n", jsCenterLow, jsCenterHigh);
    PrintLog("JSRight :  %f < v\n", jsRightLow);
    PrintLog("Offset :  %f\n", joystickOffset);
    PrintLog("\n**************************************\n");
    return;
end

proc DisplayJoystickParametersUD()  'Same thing, but for up/down
    PrintLog("**************************************\n\n");
    PrintLog("JSDown  :       v < %f\n", jsDownUpperEdge);
    PrintLog("JSCenter:  %f < v < %f\n", jsCenterLowerEdgeUD, jsCenterUpperEdgeUD);
    PrintLog("JSUp :  %f < v\n", jsUpLowerEdge);
    PrintLog("Offset :  %f\n", joystickOffset);
    PrintLog("\n**************************************\n");
    return;
end

func GetJoystickLeftHigh()
    return jsLeftHigh;
end

func GetJoystickCenterLow()
    return jsCenterLow;
end

func GetJoystickCenterHigh()
    return jsCenterHigh;
end

func GetJoystickRightLow()
    return jsRightLow;
end

'And the same things, but for up/down
func GetJoystickDownUpperEdge()
    return jsDownUpperEdge;
end

func GetJoystickCenterLowerEdgeUD()
    return jsCenterLowerEdgeUD;
end

func GetJoystickCenterUpperEdgeUD()
    return jsCenterUpperEdgeUD;
end

func GetJoystickUpLowerEdge()
    return jsUpLowerEdge;
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickVoltage%
'
' Returns voltage currently read on joystick channel. Returns 0 if a 
' value was read, or -1 if the joystick channel was not initialized 
' (i.e. InitJoystick() was not called), or if there is some other 
' error (wrong channel number, e.g.). 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetJoystickVoltage%(&v)
    var status% := -1;
    var data%;
    if jsIsInitialized% <> 0 then
        v := ChanValue(jsChannelNumber%, MaxTime(), data%);
        if data% = 1 then
            status% := 0;
        endif
    endif
    return status%;
end

    


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPosition%
'
' Tests current voltage from joystick channel and determines position, 
' either JSLeft%, JSCenter%, JSRight% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetJoystickPosition%(&v)
    var pos% := JSError%;
    var s%;
    
    ' Check if debugging (initialized with channel < 0). If so, present a dialog to get 
    ' joystick position
    
    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
        
        pos% := JoystickPositionDialog%();
        
    else
        
        s% := GetJoystickVoltage%(v);
        'printlog("voltage is %f, jsLeftHigh is %f and jsRightLow is %f\n",v,jsLeftHigh,jsRightLow);
        if s% = 0 then
            
            docase
            case v <= jsLeftHigh then
                pos% := JSLeft%;
            case v < jsCenterLow then
                pos% := JSHalfLeft%;  'was JSUndefined%, change should not affect any code that I can tell
            case v <= jsCenterHigh then
                pos% := JSCenter%;
            case v < jsRightLow then
                pos% := JSHalfRight%;  'was JSUndefined%, change should not affect any code that I can tell
            else
                pos% := JSRight%;
            endcase
        endif
        
    endif
    
    return pos%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPositionUD%
'
' Tests current voltage from joystick channel and determines position, 
' either JSDown%, JSCenter%, JSUp% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetJoystickPositionUD%(&v)
    var pos% := JSError%;
    var s%;
    
    ' Check if debugging (initialized with channel < 0). If so, present a dialog to get 
    ' joystick position
    
    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
        
        'It'snot entirely clear what this is, probably some way to fake joystick data, I'm not copying it over for up/down
        'pos% := JoystickPositionDialog%();
        
    else
        
        s% := GetJoystickVoltage%(v);
        'printlog("voltage is %f, jsLeftHigh is %f and jsRightLow is %f\n",v,jsLeftHigh,jsRightLow);
        if s% = 0 then
            
            docase
            case v <= jsDownUpperEdge then
                pos% := JSDown%;
            case v < jsCenterLowerEdgeUD then
                pos% := JSHalfDown%;  'was JSUndefined%, change should not affect any code that I can tell
            case v <= jsCenterUpperEdgeUD then
                pos% := JSCenter%;
            case v < jsUpLowerEdge then
                pos% := JSHalfUp%;  'was JSUndefined%, change should not affect any code that I can tell
            else
                pos% := JSUp%;
            endcase
        endif
        
    endif
    
    return pos%;
end




func JoystickPositionDialog%()
    var val%;
    var pos%;
    DlgCreate("Joystick Position");
    DlgButton(100, "Undefined");
    DlgButton(101, "Left");
    DlgButton(102, "Center");
    DlgButton(103, "Right");
    val% := DlgShow();
    if val% = 0 or val% = 1 then
        pos% := JSError%;
    else
        pos% := val% - 100;
    endif
    return pos%;
end


proc JoystickConfigDialog()
    var volts:=0.0;
    var iUseJoystick% := 0;
    var iNoGaps% := 0;
    var iJoystickChannel% := 0;
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheck%);
    DlgReal(1, "Voltage to set", -5, 5);
    DlgCheck(2, "Use Joystick");
    DlgInteger(3, "Joystick Channel", 0, 29);
    DlgCheck(4, "No gaps");
    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);

    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return;
end


func JoystickConfigDialog%()   'This is only mildly different from the proc of same name (minus the %) above, 
                               'but to call this from a dialog button it has to be an integer function
    
    var volts:=0.0;  'please note that the value here is competely unused
    var iUseJoystick% := 0;
    var iNoGaps% := 0;
    var iJoystickChannel% := 0;  'please note that the value here is competely unused
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheck%);
    DlgReal(1, "Voltage to set", -5, 5);
    DlgCheck(2, "Use Joystick");
    DlgInteger(3, "Joystick Channel", 0, 29);
    DlgCheck(4, "No gaps");
    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);
    DlgButton(104, "Set Joystick Offset", SetJoystickOffset%, 1, 10);     
    
    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
end


func JoystickDialogCheck%(item%)
    var status% := 1;
    docase
    case item% = 0 then
        PrintLog("value of use joystick check %d\n", DlgValue(2));
        DlgEnable(1-DlgValue(2), 1);
        PrintLog("value of no gaps check %d\n", DlgValue(4));
        DlgEnable(1-DlgValue(4), -101, -103);
    case item% = 2 then
        PrintLog("value of use joystick check %d\n", DlgValue(2));
        DlgEnable(1-DlgValue(2), 1);
    case item% = 3 then
        PrintLog("js init %d\n", DlgValue(3));
        InitJoystick(DlgValue(3));
    case item% = 4 then
        PrintLog("value of no gaps check %d\n", DlgValue(4));        
        DlgEnable(1-DlgValue(4), -101, -103);
    endcase
    if SampleStatus() > -1 then 'if we are currently sampling, or prepared to sample, don't allow calibration
        DlgEnable(0,-104);
    else
        DlgEnable(1,-104);
    endif;
    return status%;
end



proc JoystickConfigDialogUD()
    var volts:=0.0;
    var iNoGaps% := 0;
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheckUD%);
    DlgReal(1, "Voltage to set", -5, 5);
    DlgCheck(2, "No gaps");
    DlgButton(100, "Down Hi", JoystickConfigDownUpperEdge%, 1, 3); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLowerEdgeUD%, 1, 4); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterUpperEdgeUD%, 1, 5); 
    DlgButton(103, "Up Low", JoystickConfigUpLowerEdge%, 1, 6); 
    jsDlgDownUpperEdgeTextItem% := DlgText(str$(jsDownUpperEdge), 20, 3, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLowerEdgeUD), 20, 4, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterUpperEdgeUD), 20, 5, 4);
    jsDlgUpLowerEdgeTextItem% := DlgText(str$(jsUpLowerEdge), 20, 6, 4);  
    
    status% := DlgShow(volts, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return;
end


func JoystickConfigDialogUD%()   'This is only mildly different from the proc of same name (minus the %) above, 
                               'but to call this from a dialog button it has to be an integer function
    
    var volts:=0.0;  'please note that the value here is competely unused
    var iNoGaps% := 0;
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheckUD%);
    DlgReal(1, "Voltage to set", -5, 5);
    DlgCheck(2, "No gaps");
    DlgButton(100, "Down Hi", JoystickConfigDownUpperEdge%, 1, 3); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLowerEdgeUD%, 1, 4); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterUpperEdgeUD%, 1, 5); 
    DlgButton(103, "Up Low", JoystickConfigUpLowerEdge%, 1, 6); 
    jsDlgDownUpperEdgeTextItem% := DlgText(str$(jsDownUpperEdge), 20, 3, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLowerEdgeUD), 20, 4, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterUpperEdgeUD), 20, 5, 4);
    jsDlgUpLowerEdgeTextItem% := DlgText(str$(jsUpLowerEdge), 20, 6, 4);
    DlgButton(104, "Set Joystick Offset", SetJoystickOffset%, 1, 10); 

    status% := DlgShow(volts, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
end


func JoystickDialogCheckUD%(item%)
    var status% := 1;
    docase
    case item% = 0 then
        PrintLog("value of no gaps check %d\n", DlgValue(2));
        DlgEnable(1-DlgValue(2), -101, -103);
    case item% = 2 then
        PrintLog("value of no gaps check %d\n", DlgValue(2));        
        DlgEnable(1-DlgValue(2), -101, -103);
    endcase
    if SampleStatus() > -1 then 'if we are currently sampling, or prepared to sample, don't allow calibration
        DlgEnable(0,-104);
    else
        DlgEnable(1,-104);
    endif;
    return status%;
end



func SetJoystickOffset%()
    var jview%;
    var currentVal;
    if SampleStatus() > -1 then  'if we are currently sampling, or prepared to sample, don't allow calibration
        message("This function cannot be used if sampling is currently occurring!");
    else
        'Get the current offset value
        GetJoystickParameters();
        
        'Create sampling configuration with current port/channel
        SampleWaveform(jsChannelNumber%,jsPortNumber%,5000); 
        SampleCalibrate(jsChannelNumber%,"volt",1,joystickOffset);
        'Start sampling, sample for about 5 seconds,
        samplemode(1);   'sets continuous recording
        jview% := FileNew(0,1+2+4);
        SampleStart();   'start sampling
        while view(jview%).maxtime() < 5 do
            yield(1);
        wend;
        
        'Get mean channel value
        currentVal := ChanMeasure(jsChannelNumber%,2,0,5);
        
        'Stop sampling
        SampleStop();
        
        'Adjust the offsets
        joystickOffset := joystickOffset - currentVal;
        
        'Save the new offset values
        SaveJoystickParameters();
        
        PrintLog("Joystick Offset :  %f\n", joystickOffset);
        
    endif
    
end



func JoystickConfigLeftHigh%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "LeftHigh", v);
    DlgValue$(jsDlgLeftHighTextItem%, str$(v));
    
    if DlgValue(4) = 1 then
        SetFloatRegistryValue(key$, "CenterLow", v);
        DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigCenterLow%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterLow", v);
    DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigCenterHigh%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterHigh", v);
    DlgValue$(jsDlgCenterHighTextItem%, str$(v));
    
    if DlgValue(4) = 1 then
        SetFloatRegistryValue(key$, "RightLow", v);
        DlgValue$(jsDlgRightLowTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigRightLow%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "RightLow", v);
    DlgValue$(jsDlgRightLowTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end



'The up/down versions are simplified as don't allw the use of the current joystick position to set a limit, as that's hard to do anyway.
func JoystickConfigDownUpperEdge%()
    var key$;
    var v;

    v := DlgValue(1);

    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "DownUpperEdge", v);
    DlgValue$(jsDlgDownUpperEdgeTextItem%, str$(v));
    
    if DlgValue(2) = 1 then
        SetFloatRegistryValue(key$, "CenterLowerEdgeUD", v);
        DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParametersUD();
    return 1;
end

func JoystickConfigCenterLowerEdgeUD%()
    var key$;
    var v;
    
    v := DlgValue(1);

    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterLowerEdgeUD", v);
    DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParametersUD();
    return 1;
end

func JoystickConfigCenterUpperEdgeUD%()
    var key$;
    var v;
    
    v := DlgValue(1);

    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterUpperEdgeUD", v);
    DlgValue$(jsDlgCenterHighTextItem%, str$(v));
    
    if DlgValue(2) = 1 then
        SetFloatRegistryValue(key$, "UpLowerEdge", v);
        DlgValue$(jsDlgUpLowerEdgeTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParametersUD();
    return 1;
end

func JoystickConfigUpLowerEdge%()
    var key$;
    var v;

    v := DlgValue(1);

    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "UpLowerEdge", v);
    DlgValue$(jsDlgUpLowerEdgeTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParametersUD();
    return 1;
end

