'$Id$
'
' This file contains utilities for using the joystick on the alert2 rig. 

#include "../util/UsreyUtil.s2s"

const JSLeft% := 1;
const JSRight% := 3;
const JSDown% := 1;  'Please note that Down/Up are NOT intended to be used together with Left/Right as a two-axis joystick at this point
const JSUp% := 3;    'Instead it just makes things make a bit more sense to use different variables for an up/down setup.

const JSCenter% := 2; 'Currently, since there is only one joystick axis, JSCenter% acts for EITHER.  This will not work
                      'for a two-axis setup and we will need to define a second variable to designate the position
                      'between "down" and "up"

const JSUndefined% := 0;
const JSError% := -1;


var jsC2L := -3;  'center to left, "outer" threshold
var jsL2C := -2;  'left to center, "inner" threshold
var jsR2C := 2;   'right to center, "inner" threshold
var jsC2R := 3;   'center to right, "outer" threshold
var jsExclLOut := -2.9;  'left exclusion zone outer reach
var jsExclLIn := -2.1;  'left exclusion zone inner reach
var jsExclRIn := 2.1;   'right exclusion zone inner reach
var jsExclROut := 2.9;   'right exclusion zone outer reach

var jsC2D := -3;  'center to down, "outer" threshold
var jsD2C := -2;  'down to center, "inner" threshold
var jsU2C := 2;   'up to center, "inner" threshold
var jsC2U := 3;   'center to up, "outer" threshold
var jsExclDOut := -2.9;  'down exclusion zone outer reach
var jsExclDIn := -2.1;  'down exclusion zone inner reach
var jsExclUIn := 2.1;   'up exclusion zone inner reach
var jsExclUOut := 2.9;   'up exclusion zone outer reach


var jsPrevPos% := JSUndefined%;  'We need to keep track of the previous joystick position to utilize inner/outer thresholds

var jsAllowExclusion%;  'If 1, allow "exclusion zones" to be used for L/R, otherwise jsUseExclusion% will be ignored
var jsAllowExclusionUD%;  'If 1, allow "exclusion zones" to be used for U/D, otherwise jsUseExclusion% will be ignored
var jsUseExclusion%;  'If 1, use "exclusion zones", return JSUndefined% if joystick is in exclusion zone, 
                      'must be set "manually" in calling code and can be toggled

var jsXInverted% := 0;  'if 1, polarity of the X-axis (normally left-negative, right-positive) should be taken to be inverted
var jsYInverted% := 0;  'if 1, polarity of the Y-axis (normally down-negative, up-positive) should be taken to be inverted
var jsChannelNumber% := -999;
var jsPortNumber% := 0;
var jsIsInitialized% := 0;
var joystickOffset;  'offset of joystick, will be saved to registry

var jsDlgLeftHighTextItem%;
var jsDlgCenterLowTextItem%;
var jsDlgCenterHighTextItem%;
var jsDlgRightLowTextItem%;
var jsDlgDownUpperEdgeTextItem%;
var jsDlgUpLowerEdgeTextItem%;

GetJoystickParameters();


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitJoystick
'
' Scripts that use the joystick functions must indicate which input channel the 
' joystick is connected to. This function must be called before calling the 
' GetJoystickPosition() func or it will return JSError. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc InitJoystick(channel%)
    jsChannelNumber% := channel%;
    jsIsInitialized% := 1;
    return;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitJoystick2
'
' Scripts that use the joystick functions must indicate which input channel the 
' joystick is connected to. This function must be called before calling the 
' GetJoystickPosition() func or it will return JSError. 
'
' Same as InitJoystick, but also assigns port number
' InitJoystick currently maintained in case anything still calls it.
' Have updated hopefully all scripts that use joystick to call InitJoystick2
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc InitJoystick2(channel%,port%)
    jsChannelNumber% := channel%;
    jsPortNumber% := port%;
    jsIsInitialized% := 1;
    return;
end





''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SetJoystickOffset%
'
' This function can only be run when sampling is not occurring,
' because it opens a new sampling instance to find the joystick
' offset, then sets joystickOffset in the registry based on the
' current value.  This joystickOffset value is then used at each
' instance of setting up a joystick channel to ensure that when
' the joystick is in the origin, the value of the joystick channel
' is zero.
'
' This function can only be run when a joystick is present!
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func SetJoystickOffset%()
    var jview%;
    var currentVal;
    if SampleStatus() > -1 then  'if we are currently sampling, or prepared to sample, don't allow calibration
        message("This function cannot be used if sampling is currently occurring!");
    else
        'Get the port number that is specified in the current config if the joystick has not been initialized (this is common)
        if jsIsInitialized% = 0 then
            jsPortNumber% := GetJoystickPort%();
        endif
        
        'Reset the sampling configuration
        SampleClear(0);
        
        'Get the current offset value
        GetJoystickParameters();
        printlog("Setting Joystick Offset\n");
        printlog("Original joystick offset is %f volts\n",joystickOffset);
        printlog("Joystick port number is %d\n",jsPortNumber%);
        
        'Create sampling configuration with current port/channel
        'SampleWaveform(jsChannelNumber%,jsPortNumber%,5000); 
        'SampleCalibrate(jsChannelNumber%,"volt",1,joystickOffset);  'set offset of novel channel to registry value
        SampleWaveform(1,jsPortNumber%,5000); 'Channel number is irrelevant for novel channel, cannot be -999 as jsChannelNumber% default
        SampleCalibrate(1,"volt",1,joystickOffset);  'set offset of novel channel to registry value
        'Start sampling, sample for about 5 seconds,
        samplemode(1);   'sets continuous recording
        jview% := FileNew(0,1+2+4);
        SampleStart();   'start sampling
        while view(jview%).maxtime() < 5 do
            yield(1);
        wend;
        
        'Get mean channel value, using registry offset
        'currentVal := ChanMeasure(jsChannelNumber%,2,0,5);
        currentVal := ChanMeasure(1,2,0,5);
        printlog("Current voltage value (joystick zeroed) is %f\n",currentVal);
        
        'Stop sampling
        SampleStop();
        
        'Adjust the offset
        joystickOffset := joystickOffset - currentVal;
        
        'Save the new offset value to the registry
        SaveJoystickParameters();
        
        PrintLog("New Joystick Offset :  %f\n",joystickOffset);
        
        'Offset value from registry will be used to adjust the offset of the joystick channel each time it is initialized
        
    endif
    
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickVoltage%
'
' Returns voltage currently read on joystick channel. Returns 0 if a 
' value was read, or -1 if the joystick channel was not initialized 
' (i.e. InitJoystick() was not called), or if there is some other 
' error (wrong channel number, e.g.). 
'
' Note that we currently have only one joystick channel.  If we ever
' decide to use two channels we'll have to update a ton of stuff.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetJoystickVoltage%(&v)
    var status% := -1;
    var data%;
    if jsIsInitialized% <> 0 then
        v := ChanValue(jsChannelNumber%, MaxTime(), data%);
        if data% = 1 then
            status% := 0;
        endif
    endif
    return status%;
end






' ======================================================================
'
' The following functions were updated on 1/2/2024, see overhaul note 
' below this section
'
' ======================================================================


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickParameters
'
' Called automatically when this file is included in a script. No need to 
' call it from scripts. This function fetches joystick settings for the 
' current configuration from the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc GetJoystickParameters()
    var key$;
    var stmp$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    jsC2L := GetFloatRegistryValue(key$, "C2L", jsC2L);
    jsC2R := GetFloatRegistryValue(key$, "C2R", jsC2R);
    jsL2C := GetFloatRegistryValue(key$, "L2C", jsL2C);
    jsR2C := GetFloatRegistryValue(key$, "R2C", jsR2C);
    jsExclLIn := GetFloatRegistryValue(key$, "ExclLIn", jsExclLIn);
    jsExclRIn := GetFloatRegistryValue(key$, "ExclRIn", jsExclRIn);
    jsExclLOut := GetFloatRegistryValue(key$, "ExclLOut", jsExclLOut);
    jsExclROut := GetFloatRegistryValue(key$, "ExclROut", jsExclROut);
    jsAllowExclusion% := GetIntRegistryValue%(key$, "AllowExclusion", jsAllowExclusion%);
    jsXInverted% := GetIntRegistryValue%(key$, "XInverted", jsXInverted%);
    
    jsC2U := GetFloatRegistryValue(key$, "C2U", jsC2U);
    jsC2D := GetFloatRegistryValue(key$, "C2D", jsC2D);
    jsU2C := GetFloatRegistryValue(key$, "U2C", jsU2C);
    jsD2C := GetFloatRegistryValue(key$, "D2C", jsD2C);
    jsExclUIn := GetFloatRegistryValue(key$, "ExclUIn", jsExclUIn);
    jsExclUOut := GetFloatRegistryValue(key$, "ExclUOut", jsExclUOut);
    jsExclDIn := GetFloatRegistryValue(key$, "ExclDIn", jsExclDIn);
    jsExclDOut := GetFloatRegistryValue(key$, "ExclDOut", jsExclDOut);
    jsAllowExclusionUD% := GetIntRegistryValue%(key$, "AllowExclusionUD", jsAllowExclusionUD%);
    jsYInverted% := GetIntRegistryValue%(key$, "YInverted", jsYInverted%);
    
    joystickOffset := GetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
    return;
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SaveJoystickParameters
'
' This function saves joystick settings for the 
' current configuration in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc SaveJoystickParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "C2L", jsC2L);
    SetFloatRegistryValue(key$, "C2R", jsC2R);
    SetFloatRegistryValue(key$, "L2C", jsL2C);
    SetFloatRegistryValue(key$, "R2C", jsR2C);
    SetFloatRegistryValue(key$, "ExclLIn", jsExclLIn);
    SetFloatRegistryValue(key$, "ExclRIn", jsExclRIn);
    SetFloatRegistryValue(key$, "ExclLOut", jsExclLOut);
    SetFloatRegistryValue(key$, "ExclROut", jsExclROut);
    SetIntRegistryValue(key$, "AllowExclusion", jsAllowExclusion%);
    SetIntRegistryValue(key$, "XInverted", jsXInverted%);
    
    SetFloatRegistryValue(key$, "C2U", jsC2U);
    SetFloatRegistryValue(key$, "C2D", jsC2D);
    SetFloatRegistryValue(key$, "U2C", jsU2C);
    SetFloatRegistryValue(key$, "D2C", jsD2C);
    SetFloatRegistryValue(key$, "ExclUIn", jsExclUin);
    SetFloatRegistryValue(key$, "ExclUOut", jsExclUOut);
    SetFloatRegistryValue(key$, "ExclDIn", jsExclDIn);
    SetFloatRegistryValue(key$, "ExclDOut", jsExclDOut);
    SetIntRegistryValue(key$, "AllowExclusionUD", jsAllowExclusionUD%);
    SetIntRegistryValue(key$, "YInverted", jsYInverted%);
    
    SetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
    return;
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DisplayJoystickParameters[UD]
'
' These functions print current joystick settings to the log file 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc DisplayJoystickParameters()
    PrintLog("**************************************\n\n");
    
    PrintLog("JSCenterToLeft           :  %f\n", jsC2L);
    PrintLog("JSLeftExclusionOuter     :  %f\n", jsExclLOut);
    PrintLog("JSLeftExclusionInner     :  %f\n", jsExclLIn);
    PrintLog("JSLeftToCenter           :  %f\n", jsL2C);
    PrintLog("JSRightToCenter          :  %f\n", jsR2C);
    PrintLog("JSRightExclusionInner    :  %f\n", jsExclRIn);
    PrintLog("JSRightToCenterExclusion :  %f\n", jsExclROut);
    PrintLog("JSCenterToRight          :  %f\n", jsC2R);
    
    PrintLog("Offset                   :  %f\n", joystickOffset);
    PrintLog("Allow Exclusion Zones    :  %f\n", jsAllowExclusion%);
    Printlog("X Inverted               :  %d\n", jsXInverted%);
    PrintLog("\n**************************************\n");
    return;
end

proc DisplayJoystickParametersUD()  'Same thing, but for up/down
    PrintLog("**************************************\n\n");
    
    PrintLog("JSCenterToDown          :  %f\n", jsC2D);
    PrintLog("JSDownExclusionOuter    :  %f\n", jsExclDOut);
    PrintLog("JSDownExclusionInner    :  %f\n", jsExclDIn);
    PrintLog("JSDownToCenter          :  %f\n", jsD2C);
    PrintLog("JSUpToCenter            :  %f\n", jsU2C);
    PrintLog("JSUpExclusionInner      :  %f\n", jsExclUIn);
    PrintLog("JSUpExclusionOuter      :  %f\n", jsExclUOut);
    PrintLog("JSCenterToUp            :  %f\n", jsC2U);
    
    PrintLog("Offset                  :  %f\n", joystickOffset);
    PrintLog("Allow Exclusion Zones   :  %f\n", jsAllowExclusionUD%);
    Printlog("Y Inverted              :  %d\n", jsYInverted%);
    PrintLog("\n**************************************\n");
    return;
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPosition%
'
' Tests current voltage from joystick channel and determines position, 
' either JSLeft%, JSCenter%, JSRight% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
' We have now implemented an "exclusion zone" (over my philosophical
' objections) which returns JSUndefined%. This exclusion zone is double
' gated, which means that for the exclusion zone to be active, it must
' both be selected in the dialog (jsAllowExclusion%) AND toggled on in
' the main code (jsUseExclusion%). The general idea is for the exclusion
' zone to operate during a mandatory "hold" period (e.g. during the S1
' for an S1-S2 stimulus pair) and then to be disabled with the code
' toggle once a response is allowed (because obviously travel through
' the exclusion zone is mandatory for a response). The main code really
' should consider entry into the exclusion zone an interrupt but the
' JSUndefined% return could be interpreted any way you want. The reason
' for this change is that one animal has learned to perform/allow a
' pronounced centerward "drift" during the S1 stimulus and there is 
' concern that the animal does not understand the intended binary nature
' of the response positions.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetJoystickPosition%(&v)
    var pos% := JSError%;
    var s%;
    
    'Removing debug dialog from earlier version, return undefined if joystick channel is negative
    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
        pos% := JSUndefined%;
    else
        s% := GetJoystickVoltage%(v);
        if jsXInverted% = 1 then 'invert voltage if necessary
            v := -v;
        endif;
        
        if s% = 0 then
            docase
            case jsAllowExclusion% = 1 and jsUseExclusion% = 1 and v > jsExclLOut and v < jsExclLIn then
                pos% := JSUndefined%;  'we don't care what the previous position was, if you are in the exclusion zone while it is in use, that's a no-no
            case jsAllowExclusion% = 1 and jsUseExclusion% = 1 and v > jsExclRIn and v < jsExclROut then
                pos% := JSUndefined%;  'we don't care what the previous position was, if you are in the exclusion zone while it is in use, that's a no-no    
            case jsPrevPos% = JSLeft% then  'if the joystick was left, use "inner" left threshold
                docase
                case v <= jsL2C then
                    pos% := JSLeft%;
                case v <= jsC2R then
                    pos% := JSCenter%;
                else
                    pos% := JSRight%;
                endcase
            case jsPrevPos% = JSRight% then   'if the joystick was right, use "inner" right threshold
                docase
                case v <= jsC2L then
                    pos% := JSLeft%;
                case v <= jsR2C then
                    pos% := JSCenter%;
                else
                    pos% := JSRight%;
                endcase
            else  'joystick was neither left nor right (center, or never checked), use both outer thresholds     
                docase
                case v <= jsC2L then
                    pos% := JSLeft%;
                case v <= jsC2R then
                    pos% := JSCenter%;
                else
                    pos% := JSRight%;
                endcase
            endcase 
        endif
    endif
    
    if pos% <> JSUndefined% then
        jsPrevPos% := pos%;  'Keep a record of the most recent joystick position, except for undefined
    endif
    
    return pos%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPositionUD%
'
' Tests current voltage from joystick channel and determines position, 
' either JSDown%, JSCenter%, JSUp% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
' We have now implemented an "exclusion zone" (over my philosophical
' objections) which returns JSUndefined%. This exclusion zone is double
' gated, which means that for the exclusion zone to be active, it must
' both be selected in the dialog (jsAllowExclusion%) AND toggled on in
' the main code (jsUseExclusion%). The general idea is for the exclusion
' zone to operate during a mandatory "hold" period (e.g. during the S1
' for an S1-S2 stimulus pair) and then to be disabled with the code
' toggle once a response is allowed (because obviously travel through
' the exclusion zone is mandatory for a response). The main code really
' should consider entry into the exclusion zone an interrupt but the
' JSUndefined% return could be interpreted any way you want. The reason
' for this change is that one animal has learned to perform/allow a
' pronounced centerward "drift" during the S1 stimulus and there is 
' concern that the animal does not understand the intended binary nature
' of the response positions.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetJoystickPositionUD%(&v)
    var pos% := JSError%;
    var s%;
    
    'Removing debug dialog from eariler version, return undefined if joystick channel is negative
    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
        pos% := JSUndefined%;
    else
        s% := GetJoystickVoltage%(v); 'invert voltage if necessary
        if jsYInverted% = 1 then
            v := -v;
        endif;

        if s% = 0 then
            docase
            case jsAllowExclusionUD% = 1 and jsUseExclusion% = 1 and v > jsExclDOut and v < jsExclDIn then
                pos% := JSUndefined%;  'we don't care what the previous position was, if you are in the exclusion zone while it is in use, that's a no-no
            case jsAllowExclusionUD% = 1 and jsUseExclusion% = 1 and v > jsExclUIn and v < jsExclUOut then
                pos% := JSUndefined%;  'we don't care what the previous position was, if you are in the exclusion zone while it is in use, that's a no-no 
            case jsPrevPos% = JSDown% then  'if the joystick was down, use "inner" down threshold
                docase
                case v <= jsD2C then
                    pos% := JSDown%;
                case v <= jsC2U then
                    pos% := JSCenter%;
                else
                    pos% := JSUp%;
                endcase
            case jsPrevPos% = JSUp% then   'if the joystick was up, use "inner" up threshold
                docase
                case v <= jsC2D then
                    pos% := JSDown%;
                case v <= jsU2C then
                    pos% := JSCenter%;
                else
                    pos% := JSUp%;
                endcase
            else  'joystick was neither down nor up (center, or never checked), use both outer thresholds     
                docase
                case v <= jsC2D then
                    pos% := JSDown%;
                case v <= jsC2U then
                    pos% := JSCenter%;
                else
                    pos% := JSUp%;
                endcase
            endcase 
        endif
    endif
    
    if pos% <> JSUndefined% then
        jsPrevPos% := pos%;  'Keep a record of the most recent joystick position, except for undefined
    endif
    
    return pos%;
end



func JoystickConfigDialog%()   'This is only mildly different from the proc of same name (minus the %) 
                               'Since it appears nothing actually calls the proc I have not updated it
    
    var status%;
    
    GetJoystickParameters();
    
    DlgCreate("Joystick Configuration", 40, 40);
                                                     'Note: Left voltage is small (or negative), Right voltage is large (or positive)
    DlgReal(1,"(1) Center-to-Left Voltage",-20,20);  '+/-20V should cover the range of any imaginable joystick
    DlgReal(2,"(2) Outer Exclusion Voltage",-20,20);  'Callback function will check legality of values
    DlgReal(3,"(3) Inner Exclusion Voltage",-20,20); 
    DlgReal(4,"(4) Left-to-Center Voltage",-20,20);  
    
    DlgReal(5,"(5) Right-to-Center Voltage",-20,20);
    DlgReal(6,"(6) Inner Exclusion Voltage",-20,20);  
    DlgReal(7,"(7) Outer Exclusion Voltage",-20,20);
    DlgReal(8,"(8) Center-to-Right Voltage",-20,20);  
    
    DlgCheck(9,"Allow Exclusion Zones");
    DlgCheck(10,"Invert X Voltage");
    DlgButton(101, "Set Joystick Offset", SetJoystickOffset%, 1, 11); 
    DlgAllow(0, 0, JoystickDialogCheck%);    
    
    status% := DlgShow(jsC2L,jsExclLOut,jsExclLIn,jsL2C,jsR2C,jsExclRIn,jsExclROut,jsC2R,jsAllowExclusion%,jsXInverted%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
        SaveJoystickParameters();
    endif
    
    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
end


func JoystickDialogCheck%(item%)
    var status% := 1;
    
    'Enable/disable exclusion zone dialog entries
    DlgEnable(DlgValue(9),2);
    DlgEnable(DlgValue(9),3);
    DlgEnable(DlgValue(9),6);
    DlgEnable(DlgValue(9),7);
    
    'Check for legality of values
    if DlgValue(9) = 0 then  'Don't bother checking exclusion zones if they are not used
        DlgEnable(1,-1);  'Enable OK, we will fix errors if exclusion zones aren't used
        if DlgValue(4) < DlgValue(1) then
            message("Error: (4) must be >= (1)");
            DlgValue(4,DlgValue(1));
        endif
        if DlgValue(8) < DlgValue(5) then
            message("Error: (8) must be >= (5)");
            DlgValue(8,DlgValue(5));
        endif
    else  'If exclusion zones are used, check more extensively, this is too tough to "fix"
        DlgEnable(1,-1);  'Enable OK by default, but disable if exclusion zone values are wrong
        if DlgValue(4) < DlgValue(3) or DlgValue(3) < DlgValue(2) or DlgValue(2) < DlgValue(1) then
            message("Error: (4) must be >= (3) must be >= (2) must be >= (1)");
            DlgEnable(0,-1);  'Disable OK
        endif
        if DlgValue(8) < DlgValue(7) or DlgValue(7) < DlgValue(6) or DlgValue(6) < DlgValue(5) then
            message("Error: (8) must be >= (7) must be >= (6) must be >= (5)");
            DlgEnable(0,-1);  'Disable OK
        endif
    endif
    
    
    if SampleStatus() > -1 then 'if we are currently sampling, or prepared to sample, don't allow calibration
        DlgEnable(0,-101);
    else
        DlgEnable(1,-101);
    endif;
    return status%;
end



func JoystickConfigDialogUD%()   'This is only mildly different from the proc of same name (minus the %) 
                                 'Since it appears nothing actually calls the proc I have not updated it
    
    var volts:=0.0;  'please note that the value here is competely unused
    var iNoGaps% := 0;
    var status%;
    
    GetJoystickParameters();
    
    DlgCreate("Joystick Configuration (up/down)", 40, 40);
                                                     'Note: Down voltage is small (or negative), Up voltage is large (or positive)    
    DlgReal(1,"(1) Center-to-Down Voltage",-20,20);  '+/-20V should cover the range of any imaginable joystick
    DlgReal(2,"(2) Outer Exclusion Voltage",-20,20);  'Callback function will check legality of values
    DlgReal(3,"(3) Inner Exclusion Voltage",-20,20);
    DlgReal(4,"(4) Down-to-Center Voltage",-20,20);  
    
    DlgReal(5,"(5) Up-to-Center Exclusion Voltage",-20,20);
    DlgReal(6,"(6) Inner Exclusion Voltage",-20,20); 
    DlgReal(7,"(7) Outer Exclusion Voltage",-20,20);  
    DlgReal(8,"(8) Center-to-Up Exclusion Voltage",-20,20);

    DlgCheck(9,"Allow Exclusion Zones");
    DlgCheck(10,"Invert Y Voltage");
    DlgButton(101, "Set Joystick Offset", SetJoystickOffset%, 1, 11); 
    DlgAllow(0, 0, JoystickDialogCheck%);    
    
    status% := DlgShow(jsC2D,jsExclDOut,jsExclDIn,jsD2C,jsU2C,jsExclUIn,jsExclUOut,jsC2U,jsAllowExclusionUD%,jsYInverted%);

    if status% = 1 then
        PrintLog("Status = 1\n");
        SaveJoystickParameters();
    endif
    
    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
end








' ====================================================================
'
' OVERHAUL LEFTOVERS
'
' On 1/2/2024, jj performed a massive overhaul of the joystick code.
' The below code, now commented out, was previously used.  This old
' system had a few issues/quirks that needed to be updated:
' 1) Joystick position was reported with five possible positions:
'    Left, undefined, center, undefined, Right (or up/down).  This
'    makes little sense as the buffer position between states does
'    not serve any good purpose.  A far better method is to have
'    inward and outward thresholds to prevent bouncing.
' 2) Joystick config dialogs used a complicated button scheme that
'    confused both users and programmers. 
' 3) Since joysticks can be wired backwards, we need a checkbox to
'    allow easy fixes of this.
'
' The code below here is commented-out leftover code from the overhaul
' in case it it ever useful or needs to be revisited.
'
' Note that current code only uses a single joystick axis, either
' defined as L/R or U/D.  Future code may need to be updated to allow
' two joystick axes simultaneously.  This will require updates here as
' well as to the DAQ code that assigns channels/ports.
'
' ====================================================================


'var jsLeftHigh := 1;
'var jsCenterLow := 2;
'var jsCenterHigh := 3;
'var jsRightLow := 4;
'var jsDownUpperEdge := 1;       'Please note that Down/Up are NOT intended to be used together with Left/Right as a two-axis joystick at this point
'var jsCenterLowerEdgeUD := 2;   'Instead it just makes things make a bit more sense to use different variables for an up/down setup.
'var jsCenterUpperEdgeUD := 3;
'var jsUpLowerEdge := 4;
'const JSHalfDown% := 15;
'const JSHalfUp% := 25;
'const JSHalfLeft% := 15;  'It's an integer, so we can't do 1.5, and as this is being added later, some scripts may count on checking literal values rather than, say, JSLeft%, so we shouldn't change JSLeft% to 10
'const JSHalfRight% := 25;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickParameters
'
' Called automatically when this file is included in a script. No need to 
' call it from scripts. This function fetches joystick settings for the 
' current configuration from the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'proc GetJoystickParameters()
'    var key$;
'    var stmp$;
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    jsLeftHigh := GetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
'    jsCenterLow := GetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
'    jsCenterHigh := GetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
'    jsRightLow := GetFloatRegistryValue(key$, "RightLow", jsRightLow);
'    jsXInverted% := GetIntRegistryValue%(key$, "XInverted", jsXInverted%);
'    
'    jsDownUpperEdge := GetFloatRegistryValue(key$, "DownUpperEdge", jsDownUpperEdge);
'    jsCenterLowerEdgeUD := GetFloatRegistryValue(key$, "CenterLowerEdgeUD", jsCenterLowerEdgeUD);
'    jsCenterUpperEdgeUD := GetFloatRegistryValue(key$, "CenterUpperEdgeUD", jsCenterUpperEdgeUD);
'    jsUpLowerEdge := GetFloatRegistryValue(key$, "UpLowerEdge", jsUpLowerEdge);
'    jsYInverted% := GetIntRegistryValue%(key$, "YInverted", jsYInverted%);
'   
'    joystickOffset := GetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
'    return;
'end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SaveJoystickParameters
'
' This function saves joystick settings for the 
' current configuration in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'proc SaveJoystickParameters()
'    var key$;
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
'    SetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
'    SetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
'    SetFloatRegistryValue(key$, "RightLow", jsRightLow);
'    SetIntRegistryValue(key$, "XInverted", jsXInverted%);
'    
'    SetFloatRegistryValue(key$, "DownUpperEdge", jsDownUpperEdge);
'    SetFloatRegistryValue(key$, "CenterLowerEdgeUD", jsCenterLowerEdgeUD);
'    SetFloatRegistryValue(key$, "CenterUpperEdgeUD", jsCenterUpperEdgeUD);
'    SetFloatRegistryValue(key$, "UpLowerEdge", jsUpLowerEdge);
'    SetIntRegistryValue(key$, "YInverted", jsYInverted%);
'    
'    SetFloatRegistryValue(key$, "joystickOffset", joystickOffset);
'    return;
'end


'proc DisplayJoystickParameters()
'    PrintLog("**************************************\n\n");
'    PrintLog("JSLeft  :       v < %f\n", jsLeftHigh);
'    PrintLog("JSCenter:  %f < v < %f\n", jsCenterLow, jsCenterHigh);
'    PrintLog("JSRight :  %f < v\n", jsRightLow);
'    PrintLog("Offset  :  %f\n", joystickOffset);
'    Printlog("Inverted:  %d\n", jsXInverted%);
'    PrintLog("\n**************************************\n");
'    return;
'end
'
'proc DisplayJoystickParametersUD()  'Same thing, but for up/down
'    PrintLog("**************************************\n\n");
'    PrintLog("JSDown  :       v < %f\n", jsDownUpperEdge);
'    PrintLog("JSCenter:  %f < v < %f\n", jsCenterLowerEdgeUD, jsCenterUpperEdgeUD);
'    PrintLog("JSUp    :  %f < v\n", jsUpLowerEdge);
'    PrintLog("Offset  :  %f\n", joystickOffset);
'    Printlog("Inverted:  %d\n", jsYInverted%);
'    PrintLog("\n**************************************\n");
'    return;
'end







    


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPosition%
'
' Tests current voltage from joystick channel and determines position, 
' either JSLeft%, JSCenter%, JSRight% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'func GetJoystickPosition%(&v)
'    var pos% := JSError%;
'    var s%;
'    
'    ' Check if debugging (initialized with channel < 0). If so, present a dialog to get 
'    ' joystick position
'    
'    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
'        
'        pos% := JoystickPositionDialog%();
'        
'    else
'        
'        s% := GetJoystickVoltage%(v);
'        if jsXInverted% = 1 then
'            v := -v;
'        endif;
'        'printlog("voltage is %f, jsLeftHigh is %f and jsRightLow is %f\n",v,jsLeftHigh,jsRightLow);
'        if s% = 0 then
'            
'            docase
'            case v <= jsLeftHigh then
'                pos% := JSLeft%;
'            case v < jsCenterLow then
'                pos% := JSHalfLeft%;  'was JSUndefined%, change should not affect any code that I can tell
'            case v <= jsCenterHigh then
'                pos% := JSCenter%;
'            case v < jsRightLow then
'                pos% := JSHalfRight%;  'was JSUndefined%, change should not affect any code that I can tell
'            else
'                pos% := JSRight%;
'            endcase
'        endif
'        
'    endif
'    
'    return pos%;
'end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPositionUD%
'
' Tests current voltage from joystick channel and determines position, 
' either JSDown%, JSCenter%, JSUp% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'func GetJoystickPositionUD%(&v)
'    var pos% := JSError%;
'    var s%;
'    
'    ' Check if debugging (initialized with channel < 0). If so, present a dialog to get 
'    ' joystick position
'    
'    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
'        
'        'It's not entirely clear what this is, probably some way to fake joystick data, I'm not copying it over for up/down
'        'pos% := JoystickPositionDialog%();
'        
'    else
'        
'        s% := GetJoystickVoltage%(v);
'        if jsYInverted% = 1 then
'            v := -v;
'        endif;
'        'printlog("voltage is %f, jsLeftHigh is %f and jsRightLow is %f\n",v,jsLeftHigh,jsRightLow);
'        if s% = 0 then
'            
'            docase
'            case v <= jsDownUpperEdge then
'                pos% := JSDown%;
'            case v < jsCenterLowerEdgeUD then
'                pos% := JSHalfDown%;  'was JSUndefined%, change should not affect any code that I can tell
'            case v <= jsCenterUpperEdgeUD then
'                pos% := JSCenter%;
'            case v < jsUpLowerEdge then
'                pos% := JSHalfUp%;  'was JSUndefined%, change should not affect any code that I can tell
'            else
'                pos% := JSUp%;
'            endcase
'        endif
'        
'    endif
'    
'    return pos%;
'end



'func JoystickPositionDialog%()
'    var val%;
'    var pos%;
'    DlgCreate("Joystick Position");
'    DlgButton(100, "Undefined");
'    DlgButton(101, "Left");
'    DlgButton(102, "Center");
'    DlgButton(103, "Right");
'    val% := DlgShow();
'    if val% = 0 or val% = 1 then
'        pos% := JSError%;
'    else
'        pos% := val% - 100;
'    endif
'    return pos%;
'end

' 'Note that this PROC has been deprecated 1/2/2024, I cannot find a function that calls it, so it should be unnecessary -jj
'proc JoystickConfigDialog()
'    var volts:=0.0;
'    var iUseJoystick% := 0;
'    var iNoGaps% := 0;
'    var iJoystickChannel% := 0;
'    var status%;
'    
'    DlgCreate("Joystick Configuration", 40, 40);
'    DlgAllow(0, 0, JoystickDialogCheck%);
'    DlgReal(1, "Voltage to set", -5, 5);
'    DlgCheck(2, "Use Joystick");
'    DlgInteger(3, "Joystick Channel", 0, 29);
'    DlgCheck(4, "No gaps");
'    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
'    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
'    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
'    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
'    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
'    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
'    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
'    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);
'
'    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
'    
'    if status% = 1 then
'        PrintLog("Status = 1\n");
'    endif
'    
'    return;
'end
'
'
'func JoystickConfigDialog%()   'This is only mildly different from the proc of same name (minus the %) above, 
'                               'but to call this from a dialog button it has to be an integer function
'    
'    var volts:=0.0;  'please note that the value here is competely unused
'    var iUseJoystick% := 0;
'    var iNoGaps% := 0;
'    var iJoystickChannel% := 0;  'please note that the value here is competely unused
'    var status%;
'    
'    DlgCreate("Joystick Configuration", 40, 40);
'    DlgAllow(0, 0, JoystickDialogCheck%);
'    DlgReal(1, "Voltage to set", -5, 5);
'    DlgCheck(2, "Use Joystick");
'    DlgInteger(3, "Joystick Channel", 0, 29);
'    DlgCheck(4, "No gaps");
'    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
'    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
'    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
'    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
'    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
'    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
'    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
'    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);
'    DlgButton(104, "Set Joystick Offset", SetJoystickOffset%, 1, 10);     
'    
'    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
'    
'    if status% = 1 then
'        PrintLog("Status = 1\n");
'    endif
'    
'    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
'end
'
'
'func JoystickDialogCheck%(item%)
'    var status% := 1;
'    docase
'    case item% = 0 then
'        PrintLog("value of use joystick check %d\n", DlgValue(2));
'        DlgEnable(1-DlgValue(2), 1);
'        PrintLog("value of no gaps check %d\n", DlgValue(4));
'        DlgEnable(1-DlgValue(4), -101, -103);
'    case item% = 2 then
'        PrintLog("value of use joystick check %d\n", DlgValue(2));
'        DlgEnable(1-DlgValue(2), 1);
'    case item% = 3 then
'        PrintLog("js init %d\n", DlgValue(3));
'        InitJoystick(DlgValue(3));
'    case item% = 4 then
'        PrintLog("value of no gaps check %d\n", DlgValue(4));        
'        DlgEnable(1-DlgValue(4), -101, -103);
'    endcase
'    if SampleStatus() > -1 then 'if we are currently sampling, or prepared to sample, don't allow calibration
'        DlgEnable(0,-104);
'    else
'        DlgEnable(1,-104);
'    endif;
'    return status%;
'end
'
'
' 'Note that this PROC has been deprecated 1/2/2024, I cannot find a function that calls it, so it should be unnecessary -jj
'proc JoystickConfigDialogUD()
'    var volts:=0.0;
'    var iNoGaps% := 0;
'    var status%;
'    
'    DlgCreate("Joystick Configuration", 40, 40);
'    DlgAllow(0, 0, JoystickDialogCheckUD%);
'    DlgReal(1, "Voltage to set", -5, 5);
'    DlgCheck(2, "No gaps");
'    DlgButton(100, "Down Hi", JoystickConfigDownUpperEdge%, 1, 3); 
'    DlgButton(101, "Ctr Low", JoystickConfigCenterLowerEdgeUD%, 1, 4); 
'    DlgButton(102, "Ctr Hi", JoystickConfigCenterUpperEdgeUD%, 1, 5); 
'    DlgButton(103, "Up Low", JoystickConfigUpLowerEdge%, 1, 6); 
'    jsDlgDownUpperEdgeTextItem% := DlgText(str$(jsDownUpperEdge), 20, 3, 4);
'    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLowerEdgeUD), 20, 4, 4);
'    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterUpperEdgeUD), 20, 5, 4);
'    jsDlgUpLowerEdgeTextItem% := DlgText(str$(jsUpLowerEdge), 20, 6, 4);  
'    
'    status% := DlgShow(volts, iNoGaps%);
'    
'    if status% = 1 then
'        PrintLog("Status = 1\n");
'    endif
'    
'    return;
'end
'
'
'func JoystickConfigDialogUD%()   'This is only mildly different from the proc of same name (minus the %) above, 
'                               'but to call this from a dialog button it has to be an integer function
'    
'    var volts:=0.0;  'please note that the value here is competely unused
'    var iNoGaps% := 0;
'    var status%;
'    
'    DlgCreate("Joystick Configuration", 40, 40);
'    DlgAllow(0, 0, JoystickDialogCheckUD%);
'    DlgReal(1, "Voltage to set", -5, 5);
'    DlgCheck(2, "No gaps");
'    DlgButton(100, "Down Hi", JoystickConfigDownUpperEdge%, 1, 3); 
'    DlgButton(101, "Ctr Low", JoystickConfigCenterLowerEdgeUD%, 1, 4); 
'    DlgButton(102, "Ctr Hi", JoystickConfigCenterUpperEdgeUD%, 1, 5); 
'    DlgButton(103, "Up Low", JoystickConfigUpLowerEdge%, 1, 6); 
'    jsDlgDownUpperEdgeTextItem% := DlgText(str$(jsDownUpperEdge), 20, 3, 4);
'    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLowerEdgeUD), 20, 4, 4);
'    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterUpperEdgeUD), 20, 5, 4);
'    jsDlgUpLowerEdgeTextItem% := DlgText(str$(jsUpLowerEdge), 20, 6, 4);
'    DlgButton(104, "Set Joystick Offset", SetJoystickOffset%, 1, 10); 
'
'    status% := DlgShow(volts, iNoGaps%);
'    
'    if status% = 1 then
'        PrintLog("Status = 1\n");
'    endif
'    
'    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
'end
'
'
'func JoystickDialogCheckUD%(item%)
'    var status% := 1;
'    docase
'    case item% = 0 then
'        PrintLog("value of no gaps check %d\n", DlgValue(2));
'        DlgEnable(1-DlgValue(2), -101, -103);
'    case item% = 2 then
'        PrintLog("value of no gaps check %d\n", DlgValue(2));        
'        DlgEnable(1-DlgValue(2), -101, -103);
'    endcase
'    if SampleStatus() > -1 then 'if we are currently sampling, or prepared to sample, don't allow calibration
'        DlgEnable(0,-104);
'    else
'        DlgEnable(1,-104);
'    endif;
'    return status%;
'end







'func JoystickConfigLeftHigh%()
'    var key$;
'    var v;
'    if DlgValue(2) = 0 then
'        v := DlgValue(1);
'    else
'        if GetJoystickVoltage%(v) <> 0 then
'            LogError("", "Error reading joystick voltage. Check channel number.\n");
'            return 1;
'        endif
'    endif
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "LeftHigh", v);
'    DlgValue$(jsDlgLeftHighTextItem%, str$(v));
'    
'    if DlgValue(4) = 1 then
'        SetFloatRegistryValue(key$, "CenterLow", v);
'        DlgValue$(jsDlgCenterLowTextItem%, str$(v));
'    endif
'    
'    GetJoystickParameters();
'    DisplayJoystickParameters();
'    return 1;
'end
'
'func JoystickConfigCenterLow%()
'    var key$;
'    var v;
'    if DlgValue(2) = 0 then
'        v := DlgValue(1);
'    else
'        if GetJoystickVoltage%(v) <> 0 then
'            LogError("", "Error reading joystick voltage. Check channel number.\n");
'            return 1;
'        endif
'    endif
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "CenterLow", v);
'    DlgValue$(jsDlgCenterLowTextItem%, str$(v));
'    
'    GetJoystickParameters();
'    DisplayJoystickParameters();
'    return 1;
'end
'
'func JoystickConfigCenterHigh%()
'    var key$;
'    var v;
'    if DlgValue(2) = 0 then
'        v := DlgValue(1);
'    else
'        if GetJoystickVoltage%(v) <> 0 then
'            LogError("", "Error reading joystick voltage. Check channel number.\n");
'            return 1;
'        endif
'    endif
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "CenterHigh", v);
'    DlgValue$(jsDlgCenterHighTextItem%, str$(v));
'    
'    if DlgValue(4) = 1 then
'        SetFloatRegistryValue(key$, "RightLow", v);
'        DlgValue$(jsDlgRightLowTextItem%, str$(v));
'    endif
'    
'    GetJoystickParameters();
'    DisplayJoystickParameters();
'    return 1;
'end
'
'func JoystickConfigRightLow%()
'    var key$;
'    var v;
'    if DlgValue(2) = 0 then
'        v := DlgValue(1);
'    else
'        if GetJoystickVoltage%(v) <> 0 then
'            LogError("", "Error reading joystick voltage. Check channel number.\n");
'            return 1;
'        endif
'    endif
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "RightLow", v);
'    DlgValue$(jsDlgRightLowTextItem%, str$(v));
'    
'    GetJoystickParameters();
'    DisplayJoystickParameters();
'    return 1;
'end
'
'
'
''The up/down versions are simplified as don't allw the use of the current joystick position to set a limit, as that's hard to do anyway.
'func JoystickConfigDownUpperEdge%()
'    var key$;
'    var v;
'
'    v := DlgValue(1);
'
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "DownUpperEdge", v);
'    DlgValue$(jsDlgDownUpperEdgeTextItem%, str$(v));
'    
'    if DlgValue(2) = 1 then
'        SetFloatRegistryValue(key$, "CenterLowerEdgeUD", v);
'        DlgValue$(jsDlgCenterLowTextItem%, str$(v));
'    endif
'    
'    GetJoystickParameters();
'    DisplayJoystickParametersUD();
'    return 1;
'end
'
'func JoystickConfigCenterLowerEdgeUD%()
'    var key$;
'    var v;
'    
'    v := DlgValue(1);
'
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "CenterLowerEdgeUD", v);
'    DlgValue$(jsDlgCenterLowTextItem%, str$(v));
'    
'    GetJoystickParameters();
'    DisplayJoystickParametersUD();
'    return 1;
'end
'
'func JoystickConfigCenterUpperEdgeUD%()
'    var key$;
'    var v;
'    
'    v := DlgValue(1);
'
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "CenterUpperEdgeUD", v);
'    DlgValue$(jsDlgCenterHighTextItem%, str$(v));
'    
'    if DlgValue(2) = 1 then
'        SetFloatRegistryValue(key$, "UpLowerEdge", v);
'        DlgValue$(jsDlgUpLowerEdgeTextItem%, str$(v));
'    endif
'    
'    GetJoystickParameters();
'    DisplayJoystickParametersUD();
'    return 1;
'end
'
'func JoystickConfigUpLowerEdge%()
'    var key$;
'    var v;
'
'    v := DlgValue(1);
'
'    
'    key$ := GetRegistryKey$(1) + "\\Joystick";
'    SetFloatRegistryValue(key$, "UpLowerEdge", v);
'    DlgValue$(jsDlgUpLowerEdgeTextItem%, str$(v));
'    
'    GetJoystickParameters();
'    DisplayJoystickParametersUD();
'    return 1;
'end



'These appear unused (and they are kind of silly) jj 1/2/24
'
'func GetJoystickLeftHigh()
'    return jsLeftHigh;
'end
'
'func GetJoystickCenterLow()
'    return jsCenterLow;
'end
'
'func GetJoystickCenterHigh()
'    return jsCenterHigh;
'end
'
'func GetJoystickRightLow()
'    return jsRightLow;
'end
'
''And the same things, but for up/down
'func GetJoystickDownUpperEdge()
'    return jsDownUpperEdge;
'end
'
'func GetJoystickCenterLowerEdgeUD()
'    return jsCenterLowerEdgeUD;
'end
'
'func GetJoystickCenterUpperEdgeUD()
'    return jsCenterUpperEdgeUD;
'end
'
'func GetJoystickUpLowerEdge()
'    return jsUpLowerEdge;
'end