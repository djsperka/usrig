' $Id$
' Update 11/8/11 Jeff, includes SafeSampleKey and multi-juicer updates


#include "../util/ChannelUtilities.s2s"
#include "../util/UsreyUtil.s2s"
#include "../util/MiscUtilities.s2s"
#include "UsreyGratings.s2s"
#include "UsreyDAQ.s2s"

' Cool Mouse specific parameters
var cmRemoteGratingParametersFile$; ' initialized below
var cmLocalGratingParametersFile$;  ' initialized below
var cmUseGratingParametersFile% := 0;    ' only if remote is NOT 127.0.0.1
var cmCollectElectrodeData% := 0;

' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var TriggerChannel%;			' Channel number assigned to vsg trigger input (i.e. trigger sent by vsg)
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application
var cmNWavemarks% := 0;
var cmWavemarkPorts%[64];
var cmNContinuous% := 0;
var cmContinuousPorts%[64];

' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;
var cmScreenMMX := 400;  'we will assume that the 0,0 coordinate of fixation is at the center of the screen, and calculate the screen size from there
var cmScreenMMY := 300;
var cmScreenXDeg;  'Defined as the distance from the center of the screen to the edge, for ease with creating the LookingAtScreen%() function
var cmScreenYDeg;
var screenMMPerDegree;



' Initialized logging
LogInit(1);


UseTwo1401s% := DoWeUseTwo1401s%();
GetPortsAndNumWMsWFs%(cmNWavemarks%,cmNContinuous%,cmWavemarkPorts%[],cmContinuousPorts%[]);

' initialize filenames for remote case. The filenames must be coordinated so that the 'remote' 
' name is the filename as viewed from the remote machine. The 'local' name is the same
' file but viewed from the local machine.

cmRemoteGratingParametersFile$ := "s:\\cmouse-grating-parameters.txt";
cmLocalGratingParametersFile$ := GetStimDir$(1) + "cmouse-grating-parameters.txt";


'Note: this has been stolen from Tuning - Henry is having crashing problems and he believes that using the
'standard recording setup abolishes them
' Fetch electrode information. 
docase
case UsePlexon18WM24WF% = 1 then
    cmNWavemarks% := 13;  '13 wavemarks on the micro for plexon
    cmNContinuous% := 0;  'no continuous on the micro for plexon
    var i%;
    for i% := 0 to 12 do
        cmWavemarkPorts%[i%] := i%;
    next;
case UsePlexon7WM15CN% = 1 then 
    cmNWavemarks% := 7;  '7 wavemarks
    cmNContinuous% := 15;  '15 continuous
    for i% := 0 to 7 do
        cmWavemarkPorts%[i%] := i%;
    next;
else
    cmNWavemarks% := GetWavemarkPorts%(cmWavemarkPorts%[]);
    cmNContinuous% := GetContinuousPorts%(cmContinuousPorts%[]);
endcase;


' Dialog
if AcuteCoolMouseDialog%() <> 1 then
    halt;
endif





' Assign channel numbers for eye X,Y and trigger. 
XChannel% := 21;
YChannel% := 22;
TriggerChannel% := 23;
ReadyChannel% := 24;

ExcludedChans%[0] := 21;  'XChannel is lowest non-electrode channel used by this function
ExcludedChans%[1] := 31;  'Keyboard (default) is highest non-electrode channel used by this function

if UseTwo1401s% = 0 then
    CreateSampleConfiguration();
    
    ' Get display windows ready
    InitializeWindows();
    
    ' Prepare the toolbar buttons
    InitializeToolbar();
else
    InitializeToolbar();
endif;


'CreateSampleConfiguration();
'
'
'' Get display windows ready
'InitializeWindows();
'
'' Prepare the toolbar buttons
'InitializeToolbar();


'===============================================================================================



var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var tTrigger2:=-1;  'temp var for trigger times, used to check for infinitely narrow crosstalk
var tStimOn:=-1;	' time that stim was turned on. Used to measure spike rates 


' Constants for states
const stateStartTrial%:=0;		' Start trial state
const stateWaitForFixPtOn%:=1;		' Waiting for fixation point return trigger (on)
const stateWaitForBlank%:=2;		' Waiting for fixation point return trigger (off)
const stateWaitForStimOn%:=3;		' Wait for stimulus return trigger (on)
const stateWaitForStimOff%:=4;		' Wait for stimulus return trigger (off)
const stateWaitForAcquisition%:=5;	' Waiting for subject to acquire fixation point
const stateHoldFixation%:=6;		' Holding fixation point
const stateAbort%:=7;			' Failed trial state
const stateMaintainFixation%:=8;	' Maintaining fixation (stim off period)
const stateInterTrialInterval%:=9;	' time out after failed trial
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateTrialCompleted%:=12;		' trial has been completed successfully
const stateDone%:=13;
const stateVerifyBlank% := 14;
var iState% := stateVSGWait%;	' present state

var nTrialsStarted%:=0;
var nTrialsCompleted%:=0;
var nTrialsAborted% :=0;		' 


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
    var key$;
    var primaryTxt$;
    var secondaryTxt$;
    key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Temp\\Filepref";
    SetPrimarySecondaryTxt(primaryTxt$,secondaryTxt$);
	SampleClear(); 'Set standard sampling state
    SampleChannels(64);  '32 does not work, we need more!
	SampleAutoFile(0); 'Enable automatic file naming
    
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	DoSampleAutoName(key$,"cm","cm",primaryTxt$,secondaryTxt$);
	SampleAutoFile(1);
        
	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");    
    
    'Note: this has been stolen from Tuning - Henry is having crashing problems and he believes that using the
    'standard recording setup abolishes them
    ' Set up channels for sampling electrodes.
    SetUpElectrodeConfiguration(cmNWavemarks%,ExcludedChans%[]);
    
    
    
	SampleSequencer(script$ + "Tuning.pls");
	DoSampleOptimise();
	SampleMode(1); 'Continuous sampling
end;



proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
    XRange(0, 30);
	View(DataWindow%).WindowVisible(1);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
    if UseTwo1401s% = 1 then
        ToolbarSet(1,"StartPlexon",StartPlexon%);
    else
        ToolbarSet(1,"Sample start",Start%);
    endif;
	ToolbarSet(2,"Stop", Stop%);
	ToolbarEnable(2,0);
	Toolbar("Go", 0x3ff);

end;


' Used to hard-quit from toolbar. This will close data files without saving!!!
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var Extras$;
    var RemoteArg$;
    var remoteExtras$;
    var i%;
    
    if UseTwo1401s% = 1 then
        SampleStart(1);  'set sampling to start on a trigger
    else
        SampleStart(0); 'Start sampling now
    endif;
    
	SampleStart(0); 'Start sampling
    
    ' Clear any trigger bits on digout lines.
    SafeSampleKey("0");

    'Extras$ := " -b gray -p 2 -A " + " -d " + GetDistanceToScreenMM$() + " -g " + GetGratingParameters$("Stimulus");
    Extras$ := " -b gray -p 4 -A " + " -d " + GetDistanceToScreenMM$() + " -g " + GetGratingParameters$("Stimulus");  'Updated trigger port to 4 -jj 10/3/19
    if GetUseRemoteStimulus%() = 1 then
        
        ' We only use remote parameters file if the remote is 192.168.x.x, not 127.0.0.1
        if InStr(GetRemoteStimulusIP$(), "127.0.0.1") = 0 then
            LogStatus("Start()", "Remote stimulus on a local port.");
            cmUseGratingParametersFile% := 1;
            RemoteExtras$ := " -r " + cmRemoteGratingParametersFile$;
            
            ' Clear remote grating parameters file before we start cmouse
            i% := FileDelete(cmLocalGratingParametersFile$);
            LogStatus("Start()", "delete " + cmLocalGratingParametersFile$ + " status " + str$(i%));
        endif
                
        ' Command line in this case has remote ip and port...
        RemoteArg$ := " " + GetRemoteStimulusIP$() + " " + GetRemoteStimulusPort$() + " cmouse ";
       	CommandLine$ := "cmd /c " + bin$ + "\\remote " + RemoteArg$ + Extras$ + RemoteExtras$;
    else
       	CommandLine$ := "cmd /c " + bin$ + "\\cmouse" + Extras$;
    endif;
    
	'ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	View(DataWindow%);
	Yield(.1);
    
	'Begin the stimulus program.
	LogStatus("Start()", CommandLine$);
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then 
		Message("Could not start stimulus."); 
		SampleStop();
		halt; 
	endif

	return 1;	
end;


func StartPlexon%()
    var fp$;  'to hold current file path
    fp$ := SetPathToScriptDirectory$();
    CreateSampleConfiguration();    
    
    StartSecondInstanceOfSpike2();
    
    FilePathSet(fp$);  'change the file path back to what it was
    fp$ := FilePath$();  'read out to allow verification
    printlog("%s\n",fp$); 'and tell the world to verify
    
    ToolbarSet(1,"Start SECOND",Start%);  'change button 1 on the toolbar, this may not work
    
    ' Get display windows ready
    InitializeWindows();    
    
    return 1; 'stay in toolbar    

end







''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
    
	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SafeSampleKey("Q");
	Yield(1.0);
	SampleStop();
    
    ' if remote, check for updated stimulus
    if GetUseRemoteStimulus%() = 1 and InStr(GetRemoteStimulusIP$(), "127.0.0.1") > 0 then
        if FileOpen(cmLocalGratingParametersFile$, 8, 0) < 0 then
            LogError("Stop%()", "Cannot open registry parameters file. Saved grating parameters cannot be pushed to registry.");
        else
            var stmp$;
            Read(stmp$);
            LogStatus("Stop%()", "Got grating parameters from cmouse: " + stmp$);
            FileClose();
            SaveGratingParameters("Stimulus", stmp$);
        endif
    endif
    return 0;
end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetStimX()
	return FixationX;
end;

func GetStimY()
	return FixationY;
end;

proc GetAcuteCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\AcuteCoolMouse";
    cmCollectElectrodeData% := GetIntRegistryValue%(key$, "CollectElectrodeData", cmCollectElectrodeData%);
end

proc SaveAcuteCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\AcuteCoolMouse";
    SetIntRegistryValue(key$, "CollectElectrodeData", cmCollectElectrodeData%);
 end


func AcuteCoolMouseDialog%()
    var status% := 0;
    GetAcuteCoolMouseParameters();
    
    DlgCreate("Acute Cool Mouse Parameters");
    DlgCheck(1, "Sample From Electrodes");
    DlgAllow(0, 0);
    status% := DlgShow(cmCollectElectrodeData%);
    if status% = 1 then
        SaveAcuteCoolMouseParameters();
    endif
    return status%;
end

