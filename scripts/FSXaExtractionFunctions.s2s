#include "../util/LogUtilities.s2s"
#include "../util/ChannelUtilities.s2s"
#include "../util/FileUtilities.s2s"
#include "ExtractionUtilities.s2s"


func FSXaX%(window%, args$)
    var tlast := -1;
    var tlastFrame := -1;
    var tF, tS;
    var trigLast$;
    var trig$;
    var istate% := 0;
    var unused%[3];
    LogInfo("FSXaX:");
    View(window%);
    tlast := NextKey(tlast, trig$, "");
    while (tlast >= 0) do
        'LogInfo("Got trig: " + trig$);
        docase
        case trig$ = "F" then
            'LogInfo("Got F @ " + str$(tlast));
            if istate% <> 0 then
                LogError("FSXa", "Got F in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 1;
            endif
        case trig$ = "S" then
            'LogInfo("Got S @ " + str$(tlast));
            if istate% <> 1 then
                LogError("FSXa", "Got S in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 2;
            endif
        case trig$ = "X" then
            'LogInfo("Got X @ " + str$(tlast));
            if istate% <> 2 then
                LogError("FSXa", "Got X in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 3;
                ' get next transition in F and S channels
                tF := NextTriggerTransition(3, tlast, 1);
                tS := NextTriggerTransition(4, tlast, 1);
                if abs(tF-tS) > 0 then
                    LogInfo("BIG DIFF " + str$(abs(tF-tS)) + " at " + str$(tlast));
                endif
            endif
        case trig$ = "a" then
            'LogInfo("Got an a " + str$(tlast));
            if istate% <> 3 then
                LogError("FSXa", "Got a in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 0;
            endif
        else
            LogInfo("Unexpected trig: " + trig$ + " @ " + str$(tlast));
        endcase;
        tlast := NextKey(tlast, trig$, "");
    wend
    
    return 0;
end




