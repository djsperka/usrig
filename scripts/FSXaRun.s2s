#include "../util/UsreyUtil.s2s"
#include "../util/Directories.s2s"
#include "../util/ChannelUtilities.s2s"
#include "../util/LogUtilities.s2s"
#include "../util/FileUtilities.s2s"
#include "ExtractionUtilities.s2s"

var ok%;
var itrial%;
var ntrials% := 5;
var imanual% := 0;
var inobat% := 0;
var iMS1% := 250;
var iMS2% := 250;
var iMS3% := 250;
var iMS4% := 250;
var iStop% := 0;
var fList$[256];    ' list of bat files in demo dir

'----Event Channel recording definitions----
var FrameChannel% := 1;
var ReadyChannel% := 2;
var FixationPointChannel% := 3;
var StimChannel% := 4;
var AdvChannel% := 5;
var DataWindow%;

' launch bat file (optional)
' If launched, we will wait until ready pulse is seen. 
var nList;
var saveDir$;
var iFile% := 0;
var i%;




' Get list of bat files
saveDir$ := FilePath$();
FilePathSet(GetDemoDir$(0));
nList := FileList(fList$[], -1, "*.bat");
iFile% := 0;
FilePathSet(saveDir$);

' create dialog
DlgCreate("Test Parameters");
DlgInteger(1, "Number of trials", 1, 10000);
DlgCheck(2, "Manual triggers");
DlgInteger(3, "F-S(ms):", 100, 5000);
DlgInteger(4, "S-X(ms):", 100, 5000);
DlgInteger(5, "X-a(ms):", 100, 5000);
DlgInteger(6, "a-F(ms):", 100, 5000);
DlgList(7, 40, fList$[]);
DlgCheck(8, "No bat file");
DlgAllow(0xffff, 0, FSXaDialogChanged%);
ok%:=DlgShow(ntrials%, imanual%, iMS1%, iMS2%, iMS3%, iMS4%, iFile%, inobat%);
if ok% <> 1 then
    halt;
endif;



'Set a juicer sequencer variable so we can use this on any rig
GetJuicerType%();
SampleSeqVar(1,200);  'Also need to set the open duration for the juicer

CreateSampleConfiguration();
'InitializeToolbar();
FSXaStart%();

proc CreateSampleConfiguration()
    SampleClear(); 'Set standard sampling state
    SampleAutoFile(0); 'Disable automatic file naming
    SampleAutoComment(0); 'Prompt for comment after sampling
    SampleAutoCommit(60); 'Seconds between each file commit

    if SampleSequencer(GetScriptDir$(1) + "Tuning.pls")<>0 then
        Message("TuningTest.pls not found!");
    endif
    SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling

    SampleEvent(FrameChannel%, 0, 2, 3600);
    SampleComment$(FrameChannel%,"Frame");
    SampleTitle$(FrameChannel%,"Frame");

    SampleEvent(ReadyChannel%, 1, 2, 3600); 'Trigger channel, level
    SampleComment$(ReadyChannel%,"Ready");
    SampleTitle$(ReadyChannel%,"Ready");

    SampleEvent(FixationPointChannel%, 2, 2, 3600); 'Trigger channel, level
    SampleComment$(FixationPointChannel%,"Fixpt");
    SampleTitle$(FixationPointChannel%,"Fixpt");

    SampleEvent(StimChannel%, 3, 2, 3600); 'Trigger channel, level
    SampleComment$(StimChannel%,"Stim");
    SampleTitle$(StimChannel%,"Stim");

    SampleEvent(AdvChannel%, 4, 2, 3600); 'Trigger channel, level
    SampleComment$(AdvChannel%,"Adv");
    SampleTitle$(AdvChannel%,"Adv");

    SampleTextMark(16);

    var DataWindow%;
    DataWindow% := FileNew(0,4);
    Window(-0.235849,52.746,97.2484,99.8856);
    View(DataWindow%).WindowVisible(1);
    XRange(0, 30);
end


func FSXaStart%()
    var batFile$;
    var batCmd$;
    var batHandle%;
    var iGotPulse% := 0;
    var iCount%;
    var iReturn% := 1;
    SampleStart(0);
    if inobat% = 0 then
        batFile$ := GetDemoDir$(1) + fList$[iFile%];
        batCmd$ := "cmd /c " + batFile$;
        LogInfo("Cmd: " + batCmd$);
        batHandle% := ProgRun(batCmd$, 1);
        
        ' Now wait for ready pulse
        iGotPulse% := 0;
        iCount% := 0;
        var tR, tF;
        while iGotPulse% = 0 and iCount% < 5 do
            iGotPulse% := FindPulseUp%(ReadyChannel%, -1, tR, tF);
            Yield(0.2);
            iCount% := iCount% + 1;
        wend
        
        if iGotPulse% = 0 then
            iReturn% := Query("No ready pulse. Continue?");
        endif
        
        if iReturn% = 1 then
            if imanual% = 0 then
                for itrial% := 0 to ntrials%-1 do
                    SampleText(str$(itrial%));
                    SampleKey("F");
                    Yield(iMS1%/1000.0);
                    SampleKey("S");
                    Yield(iMS2%/1000.0);
                    SampleKey("X");
                    Yield(iMS3%/1000.0);
                    SampleKey("a");
                    Yield(iMS4%/1000.0);
                    if iStop% <> 0 then
                        break;
                    endif
                next
                SampleKey("Q");

                SampleStop();

                FSXaX%(DataWindow%, "");
            endif
        endif
    endif        
    return iReturn%;
end

func FSXaStop%()
    iStop% := 1;
    return 1;
end

func FSXaDialogChanged%(item%)    
    docase
    case item% = 2 then
        DlgEnable(1-DlgValue(2), 1,3,4,5,6);
    case item% = 8 then
        DlgEnable(1-DlgValue(8), 7);
    endcase
    return 1;
end

'proc InitializeToolbar()
'
'	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
'	ToolbarVisible(1);
'    ToolbarSet(1,"Start",FSXaStart%);
'	ToolbarSet(2,"Stop", FSXaStop%);
'	'ToolbarSet(3,"Quit", Quit%);
'	ToolbarEnable(1,1);
'	ToolbarEnable(2,1);
'	ToolbarEnable(3,1);
'	Toolbar("Go",0x3ff);
'
'end;


func FSXaX%(window%, args$)
    var tlast := -1;
    var tlastFrame := -1;
    var tF, tS;
    var trigLast$;
    var trig$;
    var istate% := 0;
    var unused%[3];
    LogInfo("FSXaX:");
    View(window%);
    tlast := NextKey(tlast, trig$, "");
    while (tlast >= 0) do
        'LogInfo("Got trig: " + trig$);
        docase
        case trig$ = "F" then
            'LogInfo("Got F @ " + str$(tlast));
            if istate% <> 0 then
                LogError("FSXa", "Got F in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 1;
            endif
        case trig$ = "S" then
            'LogInfo("Got S @ " + str$(tlast));
            if istate% <> 1 then
                LogError("FSXa", "Got S in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 2;
            endif
        case trig$ = "X" then
            'LogInfo("Got X @ " + str$(tlast));
            if istate% <> 2 then
                LogError("FSXa", "Got X in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 3;
                ' get next transition in F and S channels
                tF := NextTriggerTransition(3, tlast, 1);
                tS := NextTriggerTransition(4, tlast, 1);
                if abs(tF-tS) > 0 then
                    LogInfo("BIG DIFF " + str$(abs(tF-tS)) + " at " + str$(tlast));
                endif
            endif
        case trig$ = "a" then
            'LogInfo("Got an a " + str$(tlast));
            if istate% <> 3 then
                LogError("FSXa", "Got a in state " + str$(istate%) + " @ " + str$(tlast));
            else
                istate% := 0;
            endif
        else
            LogInfo("Unexpected trig: " + trig$ + " @ " + str$(tlast));
        endcase;
        tlast := NextKey(tlast, trig$, "");
    wend
    
    return 0;
end
