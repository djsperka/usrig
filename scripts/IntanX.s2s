#include "../util/LogUtilities.s2s"
#include "../util/ChannelUtilities.s2s"
#include "../util/FileUtilities.s2s"
#include "ExtractionUtilities.s2s"

func IntanX%(window%, args$)
    var tlast := -1;
    var t0, t1;     ' start/end time of trial
    var t1Previous; ' end time of previous trial
    var txt$, txt2$;
    var unused%[3];
    var markers%[4];
    const MAX_IMAGES% := 3;
    var tOnOff[MAX_IMAGES% * 2];
    var iNum%[MAX_IMAGES%];
    var iScore%[MAX_IMAGES%];
    var sImages$[MAX_IMAGES%];
    var iImages%[MAX_IMAGES%];
    var isNewFix% := 0;
    var typeFileMarker% := 0;   ' file type sync marker
    var tFileMarker := -1;      ' timestamp on sync marker
    var istate%;            ' 0 = W3, 1 = W6
    var outhndl;
    var i%;
    var iGroup%;
    var iReward%;
    var tReward;
    var sCommandLine$, sCommandLine2$;
    var nShown%, nNames%;
    
    LogInfo(FileName$(-3));
    outhndl := FileOpen(FileName$(-3) + ".inx", 8, 1); 
    View(window%);


    ' get RE ready for getting image number 
    if InStrRE(0, "Image(\\d+).bmp") < 0 then
        LogError("IntanX", "Error compiling RE");
        return -1;
    endif
    
    ' First INTAN marker is the file type marker
    tFileMarker := NextTime(32, tlast, markers%);
    if (tFileMarker < 0) then
        LogError("IntanX", "No markers found in channel 32!");
        return -1;
    else
        typeFileMarker% := markers%[0];
    endif
    
    ' Find the command line
    tlast := NextTextMark(-1, sCommandLine$);
    if tlast < 0 then
        sCommandLine$ := "No command line found.";
    else
        while InStr(sCommandLine$, "cmd") <> 1 and tlast > 0 do
            tlast := NextTextMark(tlast, sCommandLine$);
        wend
        if tlast > 0 then
            NextTextMark(tlast, sCommandLine2$);
        endif
    endif
    
    ' First two lines of output are the file type marker (line 1) and the command line (line 2)
    View(outhndl).Print("%f,%d\n", tFileMarker, typeFileMarker%);
    View(outhndl).Print("%s %s\n", sCommandLine$, sCommandLine2$);

    istate% := 0;
    t0 := -1;
    t1 := -1;
    t1Previous := -1;
    tlast := NextTime(32, tlast, markers%);
    while (tlast >= 0) do
    
        docase
        case istate% = 0 then
            if markers%[0] = 3 then
                t0 := tlast;
                istate% := 1;
            endif
        case istate% = 1 then
            if markers%[0] = 3 or markers%[0] = 6 then
                t1 := tlast;
                nNames% := extractImageFiles%(t0, t1, iNum%, iScore%, iReward%);
                nShown% := extractImageTrials%(t0, t1, tOnOff);
                isNewFix% := extractNewFix%(t0, t1Previous);
                if nNames% <> nShown% then
                    LogWarn("st=1", "names=" + str$(nNames%) + ", shown=" + str$(nShown%));
                endif

                if markers%[0] = 6 then
                    ' get the reward time
                    tReward := extractRewardTime(t1);
                else
                    tReward := -1;
                endif
                
                ' hardcoded for 3 images
                txt$ := Print$("%f,%f,%f,%f,%f,%f,%f,%f,%d,%f,%d,%d,%d,%d,%d,%d", t0, tOnOff[0], tOnOff[1], tOnOff[2], tOnOff[3], tOnOff[4], tOnOff[5], t1, iReward%, tReward, iNum%[0], iNum%[1], iNum%[2], iScore%[0], iScore%[1], iScore%[2]);
                View(outhndl).Print("%s\n", txt$);



                ' for case where new trial marker comes, previous trial ended prematurely. Update trial start time.
                ' for end trial case, change state to 0
                if markers%[0] = 3 then
                    t0 := tlast;
                else
                    iState% := 0;
                endif
                
            endif
        endcase;
        tlast := NextTime(32, tlast, markers%);
    wend
    View(outhndl).FileClose();
    return 0;
end

func extractNewFix%(tTrialStart, tPreviousTrialEnd)
    var ifix% := 0;
    if (tPreviousTrialEnd > tTrialStart) then
        ZZZZZZZZZZZZZ

func extractRewardTime(&t1)
    ' look for R in sample key, within 2 second of the time given
    var trwd := -1;
    var tlast := t1;
    var s$;
    tlast := NextKey(tlast, s$, "");
    while tlast > 0 and tlast < t1+2 do
        if s$ = "R" then
            trwd := tlast;
            break;
        else
            LogWarn("extractRewardTime", "Got key " + s$ + " at " + str$(tlast));
        endif
        tlast := NextKey(tlast, s$, "");
    wend
    return trwd;
end
            
func extractImageTrials%(t0, t1, times[])
', fnames$[], &group%, &reward%)
    var count% := 0;
    var i%;
    var tlast := t0;
    var tsample, t;
    var trise, tfall;
    var istatus%;
    var samp$;
    var iseries%;
    var spos%[2], ssiz%[2];
    
    ' initialize times
    ArrConst(times[], -1);
    
    'tf := NextTime(41, ta);
    istatus% := FindPulseUp%(41, tlast, trise, tfall)
    while istatus% = 1 and count% < Len(times) and tFall < t1 do
    
        'Save rise time of pulse. 
        tlast := tfall;
        times[count%] := tRise;
        count% += 1;
        istatus% := FindPulseUp%(41, tlast, trise, tfall);

    wend
    
    return count%/2;
end

func extractImageFiles%(t0, t1, fnums%[], fscore%[], &iReward%)
    var samp$;
    var ncount% := 0;
    var scount% := 0;
    var tlast;
    var i%;
    
    ' initialize
    ArrConst(fnums%[], -1);
    ArrConst(fscore%[], -1);
    iReward% := -1;
    
    tlast := NextTextMark(t0-.05, samp$);
    while tlast > 0 and tlast < t1 do
    
        ' look for easy stuff
        docase
        case samp$ = "+" then
            fscore%[scount%] := 1;
            scount% += 1;
        case samp$ = "-" then
            fscore%[scount%] := 0;
            scount% += 1;
        case samp$ = "Reward" then
            iReward% := 1;
        case samp$ = "No Reward" then
            iReward% := 0;
        else
            i% := InStrRE(samp$);
            'LogInfo("Got text: " + samp$ + " " + str$(i%));
            if i% = 2 then
                var pos%[4],sz%[4];
                InStrRE(pos%, sz%);        'get positions and sizes
                'PrintLog("Number %s\n", Mid$(samp$, pos%[1], sz%[1]));
                fnums%[ncount%] := val(Mid$(samp$, pos%[1], sz%[1]));
                ncount% += 1;
            else
                if InStr(samp$, "Image series") = 0 and InStr(samp$, "++") = 0 then
                    LogInfo("Text not handled: " + samp$);
                endif
            endif
        endcase
        tlast := NextTextMark(tlast, samp$);
    wend
    
    return ncount%;
end