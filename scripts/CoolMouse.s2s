' $Id$
' Update 11/8/11 Jeff, includes SafeSampleKey and multi-juicer updates

#include "../util/MiscUtilities.s2s"
#include "../util/ChannelUtilities.s2s"
#include "../util/UsreyUtil.s2s"
#include "UsreyGratings.s2s"
#include "UsreyDAQ.s2s"
#include "UsreyFixationPoint.s2s"

' Cool Mouse specific parameters
var cmAcquisitionTime := 1.0;
var cmFixationDuration := 1.0;
var cmMaintainFixation := 1.0;
var cmTimeOutTime := 1.0;
var cmAlwaysLooking% := 0;          ' testing only
var cmRemoteGratingParametersFile$; ' initialized below
var cmLocalGratingParametersFile$;  ' initialized below
var cmUseGratingParametersFile% := 0;    ' only if remote is NOT 127.0.0.1
var cmFixationAlwaysUp% := 0;
var cmCollectElectrodeData% := 0;
var cmUseHazardForMaintenance% := 0;  'do we use a hazard function for maintaining fixation?
var cmMinHazardTime;                  'minimum hazard time, in seconds
var cmMaxHazardTime;                  'maximum hazard time, in seconds
var cmMinRewardMS%;                   'minimum reward time, in ms, will be used to OVERWRITE JuiceRewardMSMin% from config/DAQ
var cmMaxRewardMS%;                   'maximum reward time, in ms, will be used to OVERWRITE JuiceRewardMSMax% from config/DAQ

' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var TriggerChannel%;			' Channel number assigned to vsg trigger input (i.e. trigger sent by vsg)
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application
var cmNWavemarks% := 0;
var cmWavemarkPorts%[64];
var cmNContinuous% := 0;
var cmContinuousPorts%[64];

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;
var cmScreenMMX := 400;  'we will assume that the 0,0 coordinate of fixation is at the center of the screen, and calculate the screen size from there
var cmScreenMMY := 300;
var cmScreenXDeg;  'Defined as the distance from the center of the screen to the edge, for ease with creating the LookingAtScreen%() function
var cmScreenYDeg;
var screenMMPerDegree;

' Initialized logging
LogInit(1);

UseTwo1401s% := DoWeUseTwo1401s%();
GetPortsAndNumWMsWFs%(cmNWavemarks%,cmNContinuous%,cmWavemarkPorts%[],cmContinuousPorts%[]);


' initialize filenames for remote case. The filenames must be coordinated so that the 'remote' 
' name is the filename as viewed from the remote machine. The 'local' name is the same
' file but viewed from the local machine.

cmRemoteGratingParametersFile$ := "s:\\cmouse-grating-parameters.txt";
cmLocalGratingParametersFile$ := GetStimDir$(1) + "cmouse-grating-parameters.txt";


'Note: this has been stolen from Tuning - Henry is having crashing problems and he believes that using the
'standard recording setup abolishes them
' Fetch electrode information. 
docase
case UsePlexon18WM24WF% = 1 then
    cmNWavemarks% := 13;  '13 wavemarks on the micro for plexon
    cmNContinuous% := 0;  'no continuous on the micro for plexon
    var i%;
    for i% := 0 to 12 do
        cmWavemarkPorts%[i%] := i%;
    next;
case UsePlexon7WM15CN% = 1 then 
    cmNWavemarks% := 7;  '7 wavemarks
    cmNContinuous% := 15;  '15 continuous
    for i% := 0 to 7 do
        cmWavemarkPorts%[i%] := i%;
    next;
else
    cmNWavemarks% := GetWavemarkPorts%(cmWavemarkPorts%[]);
    cmNContinuous% := GetContinuousPorts%(cmContinuousPorts%[]);
endcase;


' Dialog
if CoolMouseDialog%() <> 1 then
    halt;
endif





' Assign channel numbers for eye X,Y and trigger. 
XChannel% := 21;
YChannel% := 22;
TriggerChannel% := 23;
ReadyChannel% := 24;

ExcludedChans%[0] := 21;  'XChannel is lowest non-electrode channel used by this function
ExcludedChans%[1] := 31;  'Keyboard (default) is highest non-electrode channel used by this function

if UseTwo1401s% = 0 then
    CreateSampleConfiguration();
    
    ' Get display windows ready
    InitializeWindows();
    
    ' Prepare the toolbar buttons
    InitializeToolbar();
else
    InitializeToolbar();
endif;


'CreateSampleConfiguration();
'
'
'' Get display windows ready
'InitializeWindows();
'
'' Prepare the toolbar buttons
'InitializeToolbar();


'===============================================================================================



var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var tTrigger2:=-1;  'temp var for trigger times, used to check for infinitely narrow crosstalk
var tStimOn:=-1;	' time that stim was turned on. Used to measure spike rates 


' Constants for states
const stateStartTrial%:=0;		' Start trial state
const stateWaitForFixPtOn%:=1;		' Waiting for fixation point return trigger (on)
const stateWaitForBlank%:=2;		' Waiting for fixation point return trigger (off)
const stateWaitForStimOn%:=3;		' Wait for stimulus return trigger (on)
const stateWaitForStimOff%:=4;		' Wait for stimulus return trigger (off)
const stateWaitForAcquisition%:=5;	' Waiting for subject to acquire fixation point
const stateHoldFixation%:=6;		' Holding fixation point
const stateAbort%:=7;			' Failed trial state
const stateMaintainFixation%:=8;	' Maintaining fixation (stim off period)
const stateInterTrialInterval%:=9;	' time out after failed trial
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateTrialCompleted%:=12;		' trial has been completed successfully
const stateDone%:=13;
const stateVerifyBlank% := 14;
var iState% := stateVSGWait%;	' present state

var nTrialsStarted%:=0;
var nTrialsCompleted%:=0;
var nTrialsAborted% :=0;		' 



func IdleProcessing%()
	var iStatus% := 1;	
	tNow := View(DataWindow%).MaxTime();
    
	xEye := View(DataWindow%).ChanMeasure(XChannel%,2,tNow-.006,tNow-.001)*DegreesPerVoltX;
	yEye := View(DataWindow%).ChanMeasure(YChannel%,2,tNow-.006,tNow-.001)*DegreesPerVoltY;
    
	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif
    
    
	docase 
    case iState% = stateVSGWait% then
        
        ' HACK skip wait state!!!!! djs 2/8/2012
        
        'ChangeStateTo(stateStartTrial%, tNow);
        
        ' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
        tTrigger := View(DataWindow%).NextTime(ReadyChannel%, tLast, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 0 then
            LogStatus("stateVSGWait", "Got leading edge of trigger at " + str$(tTrigger));
            tLastTrigger := tTrigger;
            ChangeStateTo(stateVSGWaitConfirm%, tTrigger);
        endif;
        
    case iState% = stateVSGWaitConfirm% then
        
        ' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
        tTrigger := View(DataWindow%).NextTime(ReadyChannel%, tLastTrigger, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 1 then
            LogStatus("stateVSGWaitConfirm", "Got trailing edge of trigger");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateStartTrial%, tTrigger);
        endif;
        
        
    case iState% = stateStartTrial% then
        
        ' Start trial. Put up fixation point.
        LogStatus("stateStartTrial", "Send F key");
        SafeSampleKey("F");
        ChangeStateTo(stateWaitForFixPtOn%, tTrigger);
		
    case iState% = stateWaitForFixPtOn% then
        
        tTrigger := View(DataWindow%).NextTime(TriggerChannel%, tLast, vTrigger);
        if tTrigger > tLast and vTrigger = 0 then 
            ' Fixation point is up
            LogStatus("stateWaitForFixPtOn", "Fixpt is on");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateWaitForAcquisition%, tTrigger);
            DrawStim(1);	' actually this draws the location of the fixpt.
        endif
        
    case iState% = stateWaitForAcquisition% then
        
        ' Waiting for eye to fall inside of fixation window
        if InFixationWindow%(xEye, yEye) = 1 then
            LogStatus("stateWaitForAcquisition", "eye in fixation window");
            ChangeStateTo(stateHoldFixation%, tNow);
        else 
            if tNow - tStateStart > cmAcquisitionTime then
                ' failed to acquire target. 
                LogStatus("stateWaitForAcquisition", "failed.");
                ChangeStateTo(stateAbort%, tNow);
            endif
        endif
        
    case iState% = stateAbort% then
        
        if cmFixationAlwaysUp% = 1 then
            LogStatus("stateAbort", "Fixation always up, returning to waiting for acquisition.");
            ChangeStateTo(stateWaitForAcquisition%, tNow);  'just go back to waiting for acquisition
        else
            ' Signal "X" turns off fixpt and stimulus. The next state 'stateWaitForBlank' only checks for 
            ' fixpt off. 
            LogStatus("stateAbort", "send f key.");
            SafeSampleKey("f"); 
            ChangeStateTo(stateWaitForBlank%, tNow);
        endif;
        
        
    case iState% = stateWaitForBlank% then
        
        ' we just wait for fix point off signal in this case. 
        tTrigger := View(DataWindow%).NextTime(TriggerChannel%, tLast, vTrigger);
        'printlog("Value on trigger channel is %f\n",ChanValue(TriggerChannel%,tNow));
        if tTrigger > tLast and vTrigger = 1 then
            ' Fixation point is off
            tLastTrigger := tTrigger;
            
            'LogStatus("stateWaitForBlank", "Fix pt is off.");
            'ChangeStateTo(stateInterTrialInterval%, tTrigger);
            'DrawStim(0);	' actually this draws the location of the fixpt.
            
            ChangeStateTo(stateVerifyBlank%, tTrigger);
        else
            if tTrigger = -1 and vTrigger = 0 then
                'There is a path for the logic here to miss the blank - if there is crosstalk with a width but due to OS delays the actual blank happens before the recheck, we would get stuck here.  So don't.
                ChangeStateTo(stateInterTrialInterval%, tTrigger);
                LogStatus("stateWaitForBlank", "Blank occured while we were trying to identify crosstalk, move along!");
                
            endif
        endif
        
    case iState% = stateVerifyBlank% then
        
        'Here we are making sure that the condition that triggered stateWaitForBlank was NOT a false trigger from crosstalk
        'The major issue is that the crosstalk is sometimes 'infinitely narrow' - that is, the time of both the upwards and
        'the downwards transitions is identical.  NextTime can't see both events in that case.
        
        tTrigger2 := View(DataWindow%).NextTime(TriggerChannel%, tLastTrigger, vTrigger);  'so check this value again, from the last trigger time
        docase
        case tTrigger2 = -1 and vTrigger = 0 then 'no event, channel is low, blank is verified, move forward as expected
            ChangeStateTo(stateInterTrialInterval%, tTrigger);
            LogStatus("stateVerifyBlank", "Fix pt is off.");
            DrawStim(0);	' actually this draws the location of the fixpt.
        case tTrigger2 = -1 and vTrigger = 1 then 'no event, but channel is high, this implies infinitely narrow crosstalk, go back to wait for blank
            ChangeStateTo(stateWaitForBlank%, tTrigger); 'go back at the exact same time we came at, this should be OK
            LogStatus("stateVerifyBlank", "Infinitely narrow crosstalk found, returning to stateWaitForBlank.");
        case tTrigger2 > tLastTrigger and vTrigger = 0 then 'this is an event, but channel is high, implies crosstalk was not infinitely narrow, go back and wait for blank
            ChangeStateTo(stateWaitForBlank%, tTrigger2);  'go back to find blanking signal, but move beyond spurious low-to-high transition
            LogStatus("stateVerifyBlank", "Crosstalk found, returning to stateWaitForBlank.");
        case tTrigger2 > tLastTrigger and vTrigger = 1 then 'this is an event with channel going low, this implies an initial infinitely narrow crosstalk followed by a true blank signal, move forward
            ChangeStateTo(stateInterTrialInterval%, tTrigger2);  'use time of event found on this check
            LogStatus("stateVerifyBlank", "Fix pt is off.");
            DrawStim(0);	' actually this draws the location of the fixpt.
        case tTrigger2 < 0 then 'negative error code, report error
            message("Error!  Check Log!");
            printlog("Error in stateVerifyBlank, message is: %s\n",Error$(tTrigger2));
            Quit%();
        case tTrigger2 < tLastTrigger then
            message("Error!  tTrigger2 should not be less than tLastTrigger!");
            printlog("Error in stateVerifyBlank, tTrigger2 returned a seemingly impossible value less than tLast! (%f)\n",tTrigger2);
            Quit%(); 'hja edit 170517
        case tTrigger2 = tLastTrigger then
            message("Error!  tTrigger2 should not be equal to tLastTrigger!");
            printlog("Error in stateVerifyBlank, tTrigger2 returned a seemingly impossible value equal to tLast! (%f)\n",tTrigger2);
            Quit%();
        else 
            message("Error!  vTrigger is not 0 or 1");
            printlog("Error in stateVerifyBlank, vTrigger returned a seemingly impossible value! (%f)\n",vTrigger);
            Quit%();
        endcase
        
        
    case iState% = stateInterTrialInterval% then
        
        if tNow - tStateStart > cmTimeOutTime then
            
            LogStatus("stateInterTrialInterval", "time out is done.");
            ChangeStateTo(stateStartTrial%, tNow);
            
        endif
        
    case iState% = stateHoldFixation% then
        
        if InFixationWindow%(xEye, yEye) = 0 then
            
            LogStatus("stateWaitForFixation", "outside fixation window, aborting trial.");
            ChangeStateTo(stateAbort%, tNow);
            
        else 
            
            if tNow - tStateStart > cmFixationDuration then
                
                ' update tStateStart
                ChangeStateTo(stateMaintainFixation%, tNow);
                LogStatus("stateWaitForFixation", "successful trial.");
                
                ' Reward
                if cmUseHazardForMaintenance% = 1 then  'give minimum reward on first fixation if we are using a hazard function
                    SpecifyReward(JuiceRewardMSMin%);
                else 'give default reward if we are not using a hazard function
                    DefaultReward();
                endif;
                
                
                ' If we are using a hazard function for the duration of MaintainFixation, calculate new hazard time
                if cmUseHazardForMaintenance% = 1 then
                    cmMaintainFixation := GetHazardValue();
                endif;
                
            endif
            
        endif
        
    case iState% = stateMaintainFixation% then
        
        if InFixationWindow%(xEye, yEye) = 0 then
            
            LogStatus("stateWaitForFixation", "outside fixation window, aborting trial.");
            ChangeStateTo(stateAbort%, tNow);
            
        else 
            
            if tNow - tStateStart > cmMaintainFixation then
                
                ' update tStateStart, but "changing" state to current state
                ChangeStateTo(stateMaintainFixation%, tNow);
                LogStatus("stateMaintainFixation", "again....");
                
                ' Reward
                if cmUseHazardForMaintenance% = 1 then  'give delay-based reward if we are using a hazard function
                    DelayBasedReward%(cmMinHazardTime,cmMaxHazardTime,cmMaintainFixation);
                else 'give default reward if we are not using a hazard function
                    DefaultReward();
                endif;
                
                ' If we are using a hazard function for the duration of MaintainFixation, calculate new hazard time
                if cmUseHazardForMaintenance% = 1 then
                    cmMaintainFixation := GetHazardValue();
                endif;
                
            endif
            
        endif
        
    else
        
        ' Unknown state!
        Message("Unknown state=" + str$(iState%));
        halt;
        
	endcase;
    
	tLast := tNow;
	return iStatus%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
    var key$;
    var primaryTxt$;
    var secondaryTxt$;
    key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Temp\\Filepref";
    SetPrimarySecondaryTxt(primaryTxt$,secondaryTxt$);
	SampleClear(); 'Set standard sampling state
    SampleChannels(64);  '32 does not work, we need more!
	SampleAutoFile(0); 'Enable automatic file naming
    
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	DoSampleAutoName(key$,"cm","cm",primaryTxt$,secondaryTxt$);
	SampleAutoFile(1);
    
	'Channel recording definitions
	SampleEvent(TriggerChannel%, 2, 2, 3600); 'Trigger channel, level
	SampleComment$(TriggerChannel%, "Fixpt");
	SampleTitle$(TriggerChannel%, "Fixpt");
    
	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");
    
	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, GetEyeXPort%(), 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, GetEyeYPort%(), 1000);
	SampleTitle$(YChannel%, "Eye Y");
    
    
    'Note: this has been stolen from Tuning - Henry is having crashing problems and he believes that using the
    'standard recording setup abolishes them
    ' Set up channels for sampling electrodes.
    SetUpElectrodeConfiguration(cmNWavemarks%,ExcludedChans%[]);
    
    
    
	SampleSequencer(script$ + "CoolMouse.pls");
	DoSampleOptimise();
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
		var xstim, ystim;
		xstim := GetStimX();
		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], xstim);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], ystim);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
    XRange(0, 30);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(-0.550314,0.114416,41.5094,52.746);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(iMonitorChannel%,13);
	XYDrawMode(iMonitorChannel%,3,1);
	XYJoin(iMonitorChannel%,2);
'    XYColour(4,13);
'	XYDrawMode(4,3,1);
'	XYJoin(4,2);
'	XYAddData(4,-9,-7);  'this assumes an 18x14 degree monitor, could literally calculate it, and should
'	XYAddData(4,9,-7);
'	XYAddData(4,9,7);
'	XYAddData(4,-9,7);
    
    'Calculate screen values in degrees here
    var pi := 3.141592653589793;  'There is a pre-defined constant "_pi", but only on 8.03 and beyond, explicitly defining pi for back-compatibility
    screenMMPerDegree := Val(GetDistanceToScreenMM$())*pi/180;  
    cmScreenXDeg := (cmScreenMMX/2)/screenMMPerDegree;  'we are defining fvScreenX(Y)Deg as HALF the screen so it is the distance from fixation to the edge
    cmScreenYDeg := (cmScreenMMY/2)/screenMMPerDegree;
    
    XYAddData(iMonitorChannel%,-cmScreenXDeg,-cmScreenYDeg);  'this calculates it instead
	XYAddData(iMonitorChannel%,cmScreenXDeg,-cmScreenYDeg);
	XYAddData(iMonitorChannel%,cmScreenXDeg,cmScreenYDeg);
	XYAddData(iMonitorChannel%,-cmScreenXDeg,cmScreenYDeg);


end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
    if UseTwo1401s% = 1 then
        ToolbarSet(1,"StartPlexon",StartPlexon%);
    else
        ToolbarSet(1,"Sample start",Start%);
    endif;
	ToolbarSet(2,"Stop", Stop%);
	ToolbarSet(3,"Juice", Juice%);
	ToolbarEnable(2,0);
	Toolbar("Go", 0x3ff);

end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var Extras$;
    var RemoteArg$;
    var remoteExtras$;
    var i%;
    
    if UseTwo1401s% = 1 then
        SampleStart(1);  'set sampling to start on a trigger
    else
        SampleStart(0); 'Start sampling now
    endif;    
    
	SampleStart(0); 'Start sampling
    ' Set Sequencer Variable #3 based on juicer type 
    SetJuicerSequencerVariable%();
    ' Clear any trigger bits on digout lines.
    SafeSampleKey("0");

    Extras$ := " -b gray -p 2 -S 20 -A " + GetFixationArg$() + " -d " + GetDistanceToScreenMM$() + " -g " + GetGratingParameters$("Stimulus");
    if GetUseRemoteStimulus%() = 1 then
        
        ' We only use remote parameters file if the remote is 192.168.x.x, not 127.0.0.1
        if InStr(GetRemoteStimulusIP$(), "127.0.0.1") = 0 then
            LogStatus("Start()", "Remote stimulus on a local port.");
            cmUseGratingParametersFile% := 1;
            RemoteExtras$ := " -r " + cmRemoteGratingParametersFile$;
            
            ' Clear remote grating parameters file before we start cmouse
            i% := FileDelete(cmLocalGratingParametersFile$);
            LogStatus("Start()", "delete " + cmLocalGratingParametersFile$ + " status " + str$(i%));
        endif
                
        ' Command line in this case has remote ip and port...
        RemoteArg$ := " " + GetRemoteStimulusIP$() + " " + GetRemoteStimulusPort$() + " cmouse ";
       	CommandLine$ := "cmd /c " + bin$ + "\\remote " + RemoteArg$ + Extras$ + RemoteExtras$;
    else
       	CommandLine$ := "cmd /c " + bin$ + "\\cmouse" + Extras$;
    endif;
    
	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	View(DataWindow%);
	Yield(.1);
    
	'Begin the stimulus program.
	LogStatus("Start()", CommandLine$);
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then 
		Message("Could not start stimulus."); 
		SampleStop();
		halt; 
	endif

	return 1;	
end;


func StartPlexon%()
    var fp$;  'to hold current file path
    fp$ := SetPathToScriptDirectory$();
    CreateSampleConfiguration();    
    
    StartSecondInstanceOfSpike2();
    
    FilePathSet(fp$);  'change the file path back to what it was
    fp$ := FilePath$();  'read out to allow verification
    printlog("%s\n",fp$); 'and tell the world to verify
    
    ToolbarSet(1,"Start SECOND",Start%);  'change button 1 on the toolbar, this may not work
    
    ' Get display windows ready
    InitializeWindows();    
    
    return 1; 'stay in toolbar    
    
end





''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
    
	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SafeSampleKey("q");
	Yield(.1);
	SampleStop();
    
    ' if remote, check for updated stimulus
    if GetUseRemoteStimulus%() = 1 then
        if FileOpen(cmLocalGratingParametersFile$, 8, 0) < 0 then
            LogError("Stop%()", "Cannot open registry parameters file. Saved grating parameters cannot be pushed to registry.");
        else
            var stmp$;
            Read(stmp$);
            LogStatus("Stop%()", "Got grating parameters from cmouse: " + stmp$);
            FileClose();
            SaveGratingParameters("Stimulus", stmp$);
        endif
    endif
    return 0;
end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetStimX()
	return FixationX;
end;

func GetStimY()
	return FixationY;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
	var xstim, ystim;
    
    if cmAlwaysLooking% = 1 then
        return 1;
    endif
        
	xstim := GetStimX();
	ystim := GetStimY();
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-xstim, 2) + Pow(EyePosY-ystim, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;



func Juice%()
    DefaultReward();
    return 1;
end


proc GetCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\CoolMouse";
    cmAcquisitionTime := GetFloatRegistryValue(key$, "AcquisitionTime", cmAcquisitionTime);
    cmFixationDuration := GetFloatRegistryValue(key$, "FixationDuration", cmFixationDuration);
    cmMaintainFixation := GetFloatRegistryValue(key$, "MaintainFixation", cmMaintainFixation);
    cmTimeOutTime := GetFloatRegistryValue(key$, "TimeOutTime", cmTimeOutTime);
    cmFixationAlwaysUp%:= GetIntRegistryValue%(key$, "FixationAlwaysUp", cmFixationAlwaysUp%);
    cmCollectElectrodeData% := GetIntRegistryValue%(key$, "CollectElectrodeData", cmCollectElectrodeData%);
    cmUseHazardForMaintenance% := GetIntRegistryValue%(key$, "UseHazardForMaintenance", cmUseHazardForMaintenance%);
    cmMinHazardTime := GetFloatRegistryValue(key$, "MinHazardTime", cmMinHazardTime);
    cmMaxHazardTime := GetFloatRegistryValue(key$, "MaxHazardTime", cmMaxHazardTime);
    cmMinRewardMS% := GetIntRegistryValue%(key$, "MinRewardMS", cmMinRewardMS%);
    cmMaxRewardMS% := GetIntRegistryValue%(key$, "MaxRewardMS", cmMaxRewardMS%);
end

proc SaveCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\CoolMouse";
    SetFloatRegistryValue(key$, "AcquisitionTime", cmAcquisitionTime);
    SetFloatRegistryValue(key$, "FixationDuration", cmFixationDuration);
    SetFloatRegistryValue(key$, "MaintainFixation", cmMaintainFixation);
    SetFloatRegistryValue(key$, "TimeOutTime", cmTimeOutTime);
    SetIntRegistryValue(key$, "FixationAlwaysUp", cmFixationAlwaysUp%);
    SetIntRegistryValue(key$, "CollectElectrodeData", cmCollectElectrodeData%);
    SetIntRegistryValue(key$, "UseHazardForMaintenance", cmUseHazardForMaintenance%);
    SetFloatRegistryValue(key$, "MinHazardTime", cmMinHazardTime);
    SetFloatRegistryValue(key$, "MaxHazardTime", cmMaxHazardTime);
    SetIntRegistryValue(key$, "MinRewardMS", cmMinRewardMS%);
    SetIntRegistryValue(key$, "MaxRewardMS", cmMaxRewardMS%);
end


func CoolMouseDialog%()
    var status% := 0;
    GetCoolMouseParameters();
    
    DlgCreate("Alert Cool Mouse Parameters");
    DlgReal(1, "Acquisition Time", 0.01, 100.0);
    DlgReal(2, "Fixation Time", 0.01, 100.0);
    DlgCheck(3, "Use Hazard Function For Maintain Time");
    DlgReal(4, "Maintain Fixation Time, Constant", 0.01, 100.0);
    DlgReal(5, "Maintain Fixation Time, Hazard Min", 0.01, 100.0);
    DlgReal(6, "Maintain Fixation Time, Hazard Max", 0.01, 100.0);
    DlgInteger(7, "Hazard Reward, Min (ms)", 10, 1000);
    DlgInteger(8, "Hazard Reward, Max (ms)", 10, 1000);
    DlgReal(9, "Time Out Time", 0.01, 100.0);
    DlgCheck(10, "Keep Fixation Point Up");
    DlgCheck(11, "Sample From Electrodes");
    DlgAllow(0, 0, CoolMouseDialogChanged%);
    status% := DlgShow(cmAcquisitionTime, cmFixationDuration, cmUseHazardForMaintenance%, cmMaintainFixation,
                       cmMinHazardTime, cmMaxHazardTime, cmMinRewardMS%, cmMaxRewardMS%, 
                       cmTimeOutTime, cmFixationAlwaysUp%, cmCollectElectrodeData%);
    if status% = 1 then
        'Check mins/maxes for legality
        if cmMaxHazardTime < cmMinHazardTime then
            cmMaxHazardTime := cmMinHazardTime;
            message("Max hazard time was less than min hazard time!\nBoth values set to prior minimum time!");
        endif;
        if cmMaxRewardMS% < cmMinRewardMS% then
            cmMaxRewardMS% := cmMinRewardMS%;
            message("Max reward time was less than min reward time!\nBoth values set to prior minimum time!");
        endif;
        
        'Override JuiceRewardMSMin%/JuiceRewardMSMax% with values from dialog
        'This really isn't great policy and these numbers really should probably be set from within Config/DAQ as
        'that's where they live, but I guess if Henry complains enough he gets what he wants.  Note that any call
        'to GetDAQParameters() subsequent to this section will restore the values to the state from Config/DAQ, I
        'am NOT saving the values written here to the DAQ registry.  Only overriding values if hazard function used.
        if cmUseHazardForMaintenance% = 1 then
            JuiceRewardMSMin% := cmMinRewardMS%;
            JuiceRewardMSMax% := cmMaxRewardMS%;
        endif;
        
        
        SaveCoolMouseParameters();
    endif
    return status%;
end


func CoolMouseDialogChanged%(item%)
    var status% := 1;
    
    DlgEnable(1-DlgValue(3), 4);  'allow constant maintain time based on NOT using hazard function    
    
    DlgEnable(DlgValue(3), 5);  'allow hazard min based on using hazard function
    DlgEnable(DlgValue(3), 6);  'allow hazard max based on using hazard function
    DlgEnable(DlgValue(3), 7);  'allow hazard min reward time based on using hazard function
    DlgEnable(DlgValue(3), 8);  'allow hazard max reward time based on using hazard function

    return status%;
end


func GetHazardValue();
    var out;
    
    out := rand(cmMaxHazardTime-cmMinHazardTime,cmMinHazardTime);

    return out;
end
