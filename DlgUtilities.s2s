'$Id$

#include "UsreyDAQ.s2s"

var dlguNPorts%;    ' set to number of ports used in WMCNPortDialog%()

' Input arrays represent the analog input ports on the 1401 - wmports%[] are for wavemark, contports%[] are for
' continuous record.
' Will generate a dialog with checkboxes for each port. The port numbers start at 0 and go up to the size of 
' wmports%[] and contports%[]. 

func WMPortDialog%(title$, wmports%[])
    var n%;
    var i%;
    n% := Len(wmports%[]);
    
	DlgCreate(title$);
    for i% := 1 to n% do
        DlgCheck(i%, "Port " + str$(i%-1), 5, i%);
    next;
	i% := DlgShow(wmports%[]);
    return i%;
end


' Assume that length of wmports and cnports is the same. 
' Will allow selection of ports in first column. If selected, port is 
' wavemark if the "continuous" checkbox is UNCKECKED. 
' Continuous checkbox cannot be checked without checking wm checkbox. 

func WMCNPortDialog%(title$, wmports%[], cnports%[], channame$[], &CustomLabel%)
    var n%;
    var i%;
    n% := max(Len(wmports%[]), Len(cnports%[]));
    dlguNPorts% := n%;

	DlgCreate(title$);
    for i% := 1 to n% do
        DlgText("Port " + str$(i%-1), 0, i%);
        DlgCheck(i%, "Wavemark", 10, i%);
        DlgCheck(i%+n%, "Continuous", 30, i%);
        DlgString(i%+(2*n%), 15, 6, "", 50, i%);
    next;
    DlgCheck((3*n%)+1, "Use Plexon 15/15", 10, n%+1);
    DlgCheck((3*n%)+2, "Use Plexon 24WF", 30, n%+1);
    DlgCheck((3*n%)+3, "Joe Plexon #1", 10, n%+2);
    DlgCheck((3*n%)+4, "Joe Plexon #2", 30, n%+2);
    DlgCheck((3*n%)+5, "Use Custom Chan Labels", 49, n%+1);
    DlgAllow(0xffff, 0, WMCNPortDialogChanged%);
	i% := DlgShow(wmports%[0:n%],cnports%[0:n%],channame$[0:n%],UsePlexon15WF15WF2k%,UsePlexon24WF%,JoePlexon1%,JoePlexon2%,CustomLabel%);
    return i%;
end

func WMCNPortDialogChanged%(item%)
    var j%;
    var enable%;
    var enableText%;
    
    if DlgValue((3*dlguNPorts%)+1) = 1 or DlgValue((3*dlguNPorts%)+2) = 1 or DlgValue((3*dlguNPorts%)+3) = 1 or DlgValue((3*dlguNPorts%)+4) = 1 then
        enable% := 0;
    else
        enable% := 1;
    endif
    
    if DlgValue((3*dlguNPorts%)+5) = 1 then
        enableText% := 1;
    else
        enableText% := 0;
    endif; 
    
    docase
    case item% = 0 then
        for j% := 1 to dlguNPorts% do
'            DlgValue(j%, wmports%[j%]);
'            DlgValue(j%+n%, cnports%[j%]);
        next
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        for j% := (2*dlguNPorts%)+1 to (3*dlguNPorts%) do
            DlgEnable(enableText%,j%);
        next;
    case item% = (3*dlguNPorts%)+1 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+3,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+2 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+2), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+3,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+3 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+4 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+2), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+3,0);
    case item% = (3*dlguNPorts%)+5 then
        for j% := (2*dlguNPorts%)+1 to (3*dlguNPorts%) do
            DlgEnable(enableText%,j%);
        next;
    endcase
    
    return 1;
end

        


' Assume that length of wmports and cnports is the same. 
' Will allow selection of ports in first column. If selected, port is 
' wavemark if the "continuous" checkbox is UNCKECKED. 
' Continuous checkbox cannot be checked without checking wm checkbox.
' Adapted from WMCNPortDialog.  Allows 32 channels, grays out ports that 
' are defined in the DAQ parameters (EyeX, EyeY, Joystick)

func WMCNPortDialog32%(title$, wmports%[], cnports%[], channame$[], &CustomLabel%)
    'not yet written...this is still the original function
    var n%;
    var i%;
    var height%;  'not exactly the height, but the height of the eletrodes portion of the dialog
    
    n% := max(Len(wmports%[]), Len(cnports%[]));
    dlguNPorts% := n%;
    
    height% := floor(n%/2);
    
	DlgCreate(title$);
'    for i% := 1 to n% do
'        DlgText("Port " + str$(i%-1), 0, i%);
'        DlgCheck(i%, "Wavemark", 10, i%);
'        DlgCheck(i%+n%, "Continuous", 30, i%);
'        DlgString(i%+(2*n%), 15, 6, "", 50, i%);
'    next;
    for i% := 1 to height% do
        DlgText("Port " + str$(i%-1), 0, i%);
        DlgCheck(i%, "Wavemark", 10, i%);
        DlgCheck(i%+n%, "Continuous", 30, i%);
        DlgString(i%+(2*n%), 15, 6, "", 50, i%);
    next;
    for i% := height%+1 to n% do
        DlgText("Port " + str$(i%-1), 70, i%-height%);
        DlgCheck(i%, "Wavemark", 80, i%-height%);
        DlgCheck(i%+n%, "Continuous", 100, i%-height%);
        DlgString(i%+(2*n%), 15, 6, "", 120, i%-height%);
    next;
    DlgCheck((3*n%)+1, "Use Plexon 15/15", 10, height%+1);
    DlgCheck((3*n%)+2, "Use Plexon 24WF", 30, height%+1);
    DlgCheck((3*n%)+3, "Joe Plexon #1", 10, height%+2);
    DlgCheck((3*n%)+4, "Joe Plexon #2", 30, height%+2);
    DlgCheck((3*n%)+5, "Use Custom Chan Labels", 49, height%+1);
    DlgInteger((3*n%)+6, 6, 0, 40000, 75, height%+1); DlgText("Wavemark Sampling Rate",81,height%+1);
    DlgInteger((3*n%)+7, 6, 0, 40000, 75, height%+2); DlgText("Continuous Sampling Rate",81,height%+2);
    DlgAllow(0xffff, 0, WMCNPortDialogChanged32%);
	i% := DlgShow(wmports%[0:n%],cnports%[0:n%],channame$[0:n%],UsePlexon15WF15WF2k%,UsePlexon24WF%,JoePlexon1%,JoePlexon2%,CustomLabel%,WavemarkSamplingRate%,WaveformSamplingRate%);
    return i%;
end



func WMCNPortDialogChanged32%(item%)
    var j%;
    var enable%;
    var enableText%;
    
    GetDAQParameters();
    
    if DlgValue((3*dlguNPorts%)+1) = 1 or DlgValue((3*dlguNPorts%)+2) = 1 or DlgValue((3*dlguNPorts%)+3) = 1 or DlgValue((3*dlguNPorts%)+4) = 1 then
        enable% := 0;
    else
        enable% := 1;
    endif
    
    if DlgValue((3*dlguNPorts%)+5) = 1 then
        enableText% := 1;
    else
        enableText% := 0;
    endif; 
    
    docase
    case item% = 0 then
        for j% := 1 to dlguNPorts% do
'            DlgValue(j%, wmports%[j%]);
'            DlgValue(j%+n%, cnports%[j%]);
        next
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        for j% := (2*dlguNPorts%)+1 to (3*dlguNPorts%) do
            DlgEnable(enableText%,j%);
        next;
        
    case item% = (3*dlguNPorts%)+1 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+3,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+2 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+2), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+3,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+3 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+1), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+4,0);
    case item% = (3*dlguNPorts%)+4 then
        for j% := 1 to (2*dlguNPorts%) do
            'DlgEnable(1-DlgValue((2*dlguNPorts%)+2), j%);
            DlgEnable(enable%,j%);
        next;
        'clear imcompatible checkboxes
        DlgValue((3*dlguNPorts%)+1,0);
        DlgValue((3*dlguNPorts%)+2,0);
        DlgValue((3*dlguNPorts%)+3,0);
    case item% = (3*dlguNPorts%)+5 then
        for j% := (2*dlguNPorts%)+1 to (3*dlguNPorts%) do
            DlgEnable(enableText%,j%);
        next;
    endcase
    
    'Disable ports being used for eye/joystick
    if EyeXPort% >= 0 then
        DlgEnable(0,1+EyeXPort%);
        DlgEnable(0,1+EyeXPort%+dlguNPorts%);
        DlgEnable(0,1+EyeXPort%+(2*dlguNPorts%));
        DlgValue(1+EyeXPort%,0);
        DlgValue(1+EyeXPort%+dlguNPorts%,0);
        DlgValue$(1+EyeXPort%+(2*dlguNPorts%),"EyeX");
    endif;
    
    if EyeYPort% >= 0 then
        DlgEnable(0,1+EyeYPort%);
        DlgEnable(0,1+EyeYPort%+dlguNPorts%);
        DlgEnable(0,1+EyeYPort%+(2*dlguNPorts%));
        DlgValue(1+EyeYPort%,0);
        DlgValue(1+EyeYPort%+dlguNPorts%,0);
        DlgValue$(1+EyeYPort%+(2*dlguNPorts%),"EyeY");
    endif;
    
    if JoystickPort% >= 0 then
        DlgEnable(0,1+JoystickPort%);
        DlgEnable(0,1+JoystickPort%+dlguNPorts%);
        DlgEnable(0,1+JoystickPort%+(2*dlguNPorts%));
        DlgValue(1+JoystickPort%,0);
        DlgValue(1+JoystickPort%+dlguNPorts%,0);
        DlgValue$(1+JoystickPort%+(2*dlguNPorts%),"Joystk");
    endif;
    
    
    return 1;
end
