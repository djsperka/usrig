' IsInsideCircle
'
' Test whether a point (x, y) is inside a circle defined by the center
' (xCenter, yCenter) and radius r. 
'
' Returns 1 if (x, y) is inside (or on the circumference of) the circle, 
' 0 if its outside the circle. 

func IsInsideCircle%(x, y, xCenter, yCenter, r)
    if ((x-xCenter)*(x-xCenter) + (y-yCenter)*(y-yCenter)) > (r*r) then
        return 0;
    else
        return 1;
    endif
end



' IsOutsideCircle
'
' Test whether a point (x, y) is outside a circle defined by the center
' (xCenter, yCenter) and radius r. 
'
' Returns 1 if (x, y) is outside (or on the circumference of) the circle, 
' 0 if its outside the circle. 
'
' Note: You might think that it'd be wise to make this function simply 
' return 1-IsInsideCircle with the same args. Testing shows that the 
' overhead of the extra function call costs us - about 50% worse performance - 
' than the direct case. Yeah, yeah, yeah, there's the extra programmer
' overhead of making sure these two functions are consistent...... 


func IsOutsideCircle%(x, y, xCenter, yCenter, r)
'    return 1 - IsInsideCircle(x, y, xCenter, yCenter, r);
    if ((x-xCenter)*(x-xCenter) + (y-yCenter)*(y-yCenter)) > (r*r) then
        return 1;
    else
        return 0;
    endif
end


