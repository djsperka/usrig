' $Id$

#include "DlgUtilities.s2s"
#include "UsreyUtil.s2s"

var WavemarkPorts%[16];
var NumWavemarkPorts%;
var ContinuousPorts%[16];
var NumContinuousPorts%;

GetElectrodeParameters();

func GetWavemarkPorts%(ports%[])
    docase
    case Len(ports%[]) < NumWavemarkPorts% then 
        return -1;    ' array not large enough
    case NumWavemarkPorts% = 0 then
        return 0;
    else
        ArrConst(ports%[0:NumWavemarkPorts%], WavemarkPorts%[0:NumWavemarkPorts%]);
        return NumWavemarkPorts%;
    endcase
end

func GetContinuousPorts%(ports%[])
    docase
    case Len(ports%[]) < NumContinuousPorts% then 
        return -1;    ' array not large enough
    case NumContinuousPorts% = 0 then
        return 0;
    else
        ArrConst(ports%[0:NumContinuousPorts%], ContinuousPorts%[0:NumContinuousPorts%]);
        return NumContinuousPorts%;
    endcase
end

func GetWavemarkPorts$()
    var s$ := "";
    var i%;
    var count% := 0;
    for i% := 0 to NumWavemarkPorts%-1 do
        s$ += str$(WavemarkPorts%[i%]);
        if i% < NumWavemarkPorts%-1 then
            s$ += ",";
        endif
    next
    return s$;
end

func GetContinuousPorts$()
    var s$ := "";
    var i%;
    for i% := 0 to NumContinuousPorts%-1 do
        s$ += str$(ContinuousPorts%[i%]);
        if i% < NumContinuousPorts%-1 then
            s$ += ",";
        endif
    next
    return s$;
end

func ElectrodesDialog%()
    var wm%[16];
    var cn%[16];
    var i%;
    GetElectrodeParameters();
    ArrConst(wm%[], 0);
    ArrConst(cn%[], 0);
    for i% := 0 to NumContinuousPorts%-1 do
        cn%[ContinuousPorts%[i%]] := 1;
    next
    for i% := 0 to NumWavemarkPorts%-1 do
        wm%[WavemarkPorts%[i%]] := 1;
    next
    if WMCNPortDialog%("Electrode Configuration", wm%[], cn%[]) = 1 then
        NumWavemarkPorts% := 0;
        NumContinuousPorts% := 0;
        for i% := 0 to Len(wm%[])-1 do
            if wm%[i%] = 1 then
                WavemarkPorts%[NumWavemarkPorts%] := i%;
                NumWavemarkPorts% += 1;
            endif
            if cn%[i%] = 1 then
                ContinuousPorts%[NumContinuousPorts%] := i%;
                NumContinuousPorts% += 1;
            endif
        next
        SaveElectrodeParameters();
    endif
    return 1;
end;

proc GetElectrodeParameters()
	var key$;
    var s$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    s$ := GetStringRegistryValue$(key$, "WavemarkPorts", "");
    NumWavemarkPorts% := ReadStr(s$, WavemarkPorts%[]);
    s$ := GetStringRegistryValue$(key$, "ContinuousPorts", "");
    NumContinuousPorts% := ReadStr(s$, ContinuousPorts%[]);
end;

proc SaveElectrodeParameters()
    var key$;
    var s$;
    var i%;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    SetStringRegistryValue(key$, "WavemarkPorts", GetWavemarkPorts$());
    SetStringRegistryValue(key$, "ContinuousPorts", GetContinuousPorts$());    
end;


func CreateElectrodeSamplingConfiguration(iStartWM%, iStartCont%)
    var iStatus% := -1;
    var i%;
    var ichan%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
		SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    
    for i% := 0 to NumContinuousPorts%-1 do
        SampleWaveform(ichan%, ContinuousPorts%[i%], 20000);
        SampleTitle$(ichan% + 1, "Cont " + str$(ContinuousPorts%[i%]));
        ichan% += 1;
    next
    
    return iStatus%;
end


'this is exactly the same and CreateElectrodeSamplingConfiguration, but it uses a 2 kHz continuous rather than 20 kHz continuous
'it is just a quick and dirty function that allows us to try out some Plexon sampling
func CreateElectrodeSamplingConfiguration2(iStartWM%, iStartCont%)
    var iStatus% := -1;
    var i%;
    var ichan%;
    
    ' Starting channel number is iStartWM% unless iStartWM<=0, in which case we start at channel 1.
    ichan% := iStartWM%;
    if ichan% < 1 then 
        ichan% := 1;
    endif
    
    for i% := 0 to NumWavemarkPorts%-1 do
		SampleWaveMark(ichan%, WavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(ichan%, "WMrk " + str$(WavemarkPorts%[i%])); 
        ichan% += 1;
	next
    
    ' Starting channel for continuous channels is iStartCont%, unless iStartCont% is <= 0, in which case we start
    ' at NumWavemarkPorts + 1.
    ichan% := iStartCont%;
    if ichan% < 1 or ichan% <= NumWavemarkPorts% then
        ichan% := NumWavemarkPorts% + 1;
    endif
    
    
    for i% := 0 to NumContinuousPorts%-1 do
        SampleWaveform(ichan%, ContinuousPorts%[i%], 2000);
        SampleTitle$(ichan% + 1, "Cont " + str$(ContinuousPorts%[i%]));
        ichan% += 1;
    next
    
    return iStatus%;
end
